[{"id":"f655d59ec657d9c4ac827ca1e1973708","title":"如何获取Vendor Payment中的Credit Applied","content":"引言如何从脚本获取 Vendor Payment Record 中的 ‘Credit Applied’ 子列表数据\n通过DOM的方式1234567jQuery.get(window.location.href +&#x27;&amp;xml=T&#x27;).done(function(data, status, xhr)&#123;            console.log(&quot;received tran with status: &quot; + status);            var txt = xhr.responseText;            var doc = (&#x27;string&#x27; == typeof data) ? nlapiStringToXML(data) : data;            var applied = nlapiSelectNode(doc, &#x27;/nsResponse/record/machine[@name=&quot;links&quot;]&#x27;);            console.log(nlapiSelectValue(applied, &#x27;line/id&#x27;));    &#125;);","slug":"如何获取Vendor Payment中的Credit Applied","date":"2025-03-11T15:30:06.000Z","categories_index":"Netsuite","tags_index":"Netsuite","author_index":"如峰"},{"id":"f477995566c168ad09c720d022e2a50c","title":"Netsuite的代码如何做四舍五入的精确计算","content":"引言一般我们会用 toFixed做数值的四舍五入\n12var num = 5.56789;var n=num.toFixed(2);// 5.57\n\n\ntoFixed() 方法将一个浮点数转换为指定小数位数的字符串表示，如果小数位数高于数字，则使用 0 来填充。\ntoFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n\n\n\n\n\n\n\n注意\ntoFixed() 方法在进行四舍五入时可能会产生一些不准确的结果，这是因为 toFixed() 方法在处理浮点数时，实际上使用的是舍入到最近的偶数（银行家舍入）策略，而不是标准的四舍五入。这种舍入策略是为了在大量运算时减小累积误差。\n\n\n那我们如何处理数值的运算?\n引入decimal.js\n\n\n\n\n\n\n\n\n从网址https://github.com/MikeMcl/decimal.js将decimal.js文件下载下来并导入到，Netsuite的文件柜中。然后在代码里直接引用\n12345678910111213141516171819202122/** * @NApiVersion 2.1 * @NScriptType Suitelet */define([&#x27;../../common/decimal.js&#x27;],    /** * @param&#123;search&#125; search */    (Decimal) =&gt; &#123;        /**         * Defines the Suitelet script trigger point.         * @param &#123;Object&#125; scriptContext         * @param &#123;ServerRequest&#125; scriptContext.request - Incoming request         * @param &#123;ServerResponse&#125; scriptContext.response - Suitelet response         * @since 2015.2         */        const onRequest = (scriptContext) =&gt; &#123;           var num = new Decimal(5.56789).toFixed(2); // 5.57        &#125;        return &#123;onRequest&#125;    &#125;);\n\n这是他可以支持的方法\n","slug":"Netsuite的代码如何做四舍五入的精确计算","date":"2025-03-11T10:07:36.000Z","categories_index":"Netsuite","tags_index":"Netsuite","author_index":"如峰"},{"id":"eb06ef93065c8037d3e339961454164b","title":"分布式锁的使用","content":"引言分布式锁的作用就是在分布式系统中解决多个机器之间共享资源的排他性。而只要能够解决锁的排他性、可重入性、锁的获取与释放的方法、锁的失效机制及避免死锁。则就可以作为分布式锁使用\n使用Mysql作为分布式锁要实现分布式锁，最简单的方式就是直接创建一张锁表，然后通过操作该表中的数据来实现加锁和解锁。当要锁住某个方法或资源时，就向该表插入一条记录，表中设置方法名为唯一键，这样多个请求同时提交数据库时，只有一个操作可以成功，判定操作成功的线程获得该方法。创建这样的一张表\n123456789101112CREATE TABLE `method_lock` (    `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增id&#x27;,    `method_name` VARCHAR(64) NOT NULL COMMENT &#x27;方法名&#x27;,    `method_desc` VARCHAR(1024) NOT NULL COMMENT &#x27;方法描述&#x27;,    `create_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,    `update_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;,    PRIMARY KEY (`id`),    UNIQUE INDEX `uniq_method_name` (`method_name`))COMMENT=&#x27;分布式锁&#x27;COLLATE=&#x27;utf8_general_ci&#x27;ENGINE=InnoDB;\n加锁\n12insert into method_lock(method_name, method_desc) values(&quot;methodName&quot;, &quot;desc&quot;);\n解锁\n1delete from method_lock where method_name = &quot;methodName&quot;;\n以上：\n\n我们利用数据库将method_name做了唯一约束保证了排他性。\n要使用锁变为可重入的，则在数据库表中加个字段(thread_id)，记录当前获得锁的机器的主机信息和线程信息，获取锁的时候先查询数据库，如果已经获取了则直接分配给他就可以。\n这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。可以让数据库记录失效时间，使用定时任务清理。\n这把锁只能是非阻塞的，因为数据的insert操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。可以循环多次去获取。\n\n总结数据库实现分布式锁的优点：\n\n直接借助数据库，容易理解\n\n数据库实现分布式锁的缺点：\n\n因为数据库本身的缺陷会有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。\n操作需要一定的开销，性能问题需要考虑\n\n使用redis作为分布式锁在使用redis做分布式锁一般使用setnx + expire命令，即先用setnx来抢锁，如果抢到之后，再用expire给锁设置一个过期时间，防止锁忘记了释放。代码如下：\n12345678910if（jedis.setnx(key_resource_id,lock_value) == 1）&#123; //加锁    expire（key_resource_id，100）; //设置过期时间    try &#123;        do something  //业务请求    &#125;catch()&#123;  &#125;  finally &#123;       jedis.del(key_resource_id); //释放锁    &#125;&#125;\n但是这个方案中setnx + expire命令并不是原子操作。为了保证原子性我们可以使用lu脚本或者SET的扩展命令(SET EX PX NX)\n\n\n\n\n\n\n\n\n\nSET key value[EX seconds][PX milliseconds][NX|XX]\n\nNX :表示key不存在的时候，才能set成功，也即保证只有第一个客户端请求才能获得锁，而其他客户端请求只能等其释放锁，才能获取。EX seconds :设定key的过期时间，时间单位是秒。PX milliseconds: 设定key的过期时间，单位为毫秒XX: 仅当key存在时设置值\n\n代码如下:\n123456789if（jedis.set(key_resource_id, lock_value, &quot;NX&quot;, &quot;EX&quot;, 100s) == 1）&#123; //加锁    try &#123;        do something  //业务处理    &#125;catch()&#123;  &#125;  finally &#123;       jedis.del(key_resource_id); //释放锁    &#125;&#125;\n\n此时该方案的锁如果要保证可重入的，则set命令里需要加入线程ID，既可以保证只用加锁的线程能从删除也保证了锁的可重入性。Redisson框架中已经帮我们实现了这种功能\n有可能业务没执行完，超时时间到了，所以需要自动续期。Redisson框架中的看门狗帮我们实现了自动续期，以及续期上限\n如果redis是主从架构，则需要Redisson框架的redlock\n为了提高性能可以使用读写锁分离、以及分段锁\n\nZookeeper实现分布式锁Zookeeper一般使用临时顺序节点加watch监听器的方式实现分布式锁。比如客户端A创建临时节点node001,客户端A发现node001是临时顺序节点里最小的则获得锁，客户端B创建临时节点node002,发现node002不是最小节点，则客户端B开始等待，并在node001上创建监听器，当node001删除时，监听器通知客户端B，则客户端B获取到锁。\n","slug":"分布式锁的使用","date":"2022-10-11T15:30:06.000Z","categories_index":"分布式","tags_index":"分布式","author_index":"如峰"},{"id":"84a50db5bf041e6e7c87814a2cdda6c0","title":"InfluxDB1.0的入门","content":"下载安装InfluxDB下载地址：https://dl.influxdata.com/influxdb/releases/influxdb-1.5.4_windows_amd64.zip\n下载完成后修改influxdb.conf信息\n\n将[meta]里的dir修改为自己的地址\n将[data]里的dir修改为自己的地址\n\n运行InfluxDB服务通过CMD导航到所在文件夹，并执行命令启动服务\n123&gt; E:&gt; CD E:\\influxdb\\influxdb1.5.4\\influxdb-1.5.4-1&gt; influxd.exe -config influxdb.conf\n\n再打开一个CMD，并执行influx\n12345&gt; E:&gt; CD E:\\influxdb\\influxdb1.5.4\\influxdb-1.5.4-1&gt; influx# 如果配置了自定义的端口号，使用&gt; influx -port 端口号\n\n下载安装可视化软件下载地址：https://github.com/CymaticLabs/InfluxDBStudio/releases/tag/v0.2.0-beta.1\n启动软件找到InfluxDBStudio.exe并双击\n常用SQL命令\n创建数据库\n\n12-- 命令格式 create database &quot;db_name&quot;CREATE DATABASE NOAA_water_database;\n\n显示数据库\n\n1show databases;\n\n\n删除数据库\n\n12-- 命令格式 drop database &quot;db_name&quot;drop DATABASE NOAA_water_database; \n\n\n使用数据库\n\n12-- 命令格式 use &quot;db_name&quot;use NOAA_water_database; \n\n\n显示该数据库中所有的表\n\n1show measurements;\n\n\n创建表，直接在插入数据的时候指定表名\n\n12-- 命令格式 insert test,host=127.0.0.1,monitor_name=test count=1use NOAA_water_database; \n\n\n删除表\n\n12-- 命令格式 drop measurement &quot;measurement_name&quot;use NOAA_water_database; \nCRUD示例测试数据导入通过CMD导航到，并执行下载命令再通过import进行导入 (如果使用默认端口号 -port 28086  需删除)\n1234&gt; E:&gt; CD E:\\influxdb\\influxdb1.5.4\\influxdb-1.5.4-1&gt; curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt&gt; influx -port 28086 -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database\n启动influx，并测试查询\n12345678910&gt; SHOW measurements;name: measurements------------------nameaverage_temperatureh2o_feeth2o_pHh2o_qualityh2o_temperature\n\n查询数据计算water_level的非空值的数量h2o_feet\n12345&gt; SELECT COUNT(&quot;water_level&quot;) FROM h2o_feetname: h2o_feet--------------time\t\t\t         count1970-01-01T00:00:00Z\t 15258\n选择测量h2o_feet中的前五个观测值：\n123456789&gt; SELECT * FROM h2o_feet LIMIT 5name: h2o_feet--------------time\t\t\t           level description\t   location\t       water_level2015-08-18T00:00:00Z\t   below 3 feet\t\t       santa_monica\t   2.0642015-08-18T00:00:00Z\t   between 6 and 9 feet\t   coyote_creek\t   8.122015-08-18T00:06:00Z\t   between 6 and 9 feet\t   coyote_creek\t   8.0052015-08-18T00:06:00Z\t   below 3 feet\t\t       santa_monica\t   2.1162015-08-18T00:12:00Z\t   between 6 and 9 feet\t   coyote_creek\t   7.887\n删除数据1&gt; delete FROM &quot;h2o_feet&quot; where &quot;time&quot; = &#x27;2019-08-17T00:00:00Z&#x27;\n\n增加数据12# 通过\\ 解决KEY值分开的问题&gt; insert h2o_feet,location=coyote_creek water_level=10.99,level\\ description=&quot;below 3 feet&quot; 1662692351221478600\n\n修改数据12# 时间戳与tag必须与修改数据一致&gt; insert h2o_feet,location=coyote_creek water_level=10.98,level\\ description=&quot;below 3 feet&quot; 1662692351221478600\n\n数据来源和注意事项样本数据是来自美国国家海洋和大气管理局 (NOAA) 业务海洋产品和服务中心的公开数据。这些数据包括 2015 年 8 月 18 日至 2015 年 9 月 18 日期间在两个站点（加利福尼亚州圣莫尼卡 (ID 9410840) 和加利福尼亚州 Coyote Creek (ID 9414575)）每六分钟收集的 15,258 次水位 (ft) 观测值.\n请注意，测量值average_temperature、h2o_pH、h2o_quality和h2o_temperature包含虚构数据。这些测量有助于阐明Schema Exploration中的查询功能。\n该h2o_feet测量是唯一包含NOAA数据的测量。请注意，该level description字段不是原始NOAA数据的一部分 - 我们将其隐藏在其中是为了获得具有特殊字符和字符串字段值的字段键。\nInfluxDB在Java中的使用引入Maven依赖12345&lt;dependency&gt;    &lt;groupId&gt;org.influxdb&lt;/groupId&gt;    &lt;artifactId&gt;influxdb-java&lt;/artifactId&gt;    &lt;version&gt;2.18&lt;/version&gt;&lt;/dependency&gt;\n客户端连接1234567891011// 数据库连接地址private final static String serverURL = &quot;http://localhost:28086&quot;;// 账号名private final static String username = &quot;admin&quot;;// 密码private final static String password = &quot;123456&quot;;// 数据库名称private final static String databaseName = &quot;NOAA_water_database&quot;;// 创建连接InfluxDB influxDB = InfluxDBFactory.connect(serverURL, username, password);\n\n新增数据123456// 插入数据Point build = Point.measurement(&quot;h2o_feet&quot;)        .tag(&quot;location&quot;, &quot;coyote_creek&quot;)        .addField(&quot;water_level&quot;, 10.9)        .addField(&quot;level description&quot;, &quot;below 3 feet&quot;).build();influxDB.write(databaseName, &quot;&quot;, build);\n\n删除数据12345// 删除数据Query query = new Query(&quot;delete FROM \\&quot;h2o_feet\\&quot; where \\&quot;time\\&quot; = &#x27;2019-08-17T00:00:00Z&#x27;&quot;, databaseName);influxDB.query(query, 0, queryResult -&gt; &#123;    System.out.println(queryResult.getResults());&#125;);\n\n修改数据123456 // 修改数据 时间戳与需修改数据的时间戳与tag必须一样 santa_monicaPoint build = Point.measurement(&quot;h2o_feet&quot;)        .tag(&quot;location&quot;, &quot;coyote_creek&quot;)        .addField(&quot;water_level&quot;, 10.9)        .addField(&quot;level description&quot;, &quot;below 3 feet&quot;).build();influxDB.write(databaseName, &quot;&quot;, build);\n\n查询数据12345// 删除数据Query query = new Query(&quot;delete FROM \\&quot;h2o_feet\\&quot; where \\&quot;time\\&quot; = &#x27;2019-08-17T00:00:00Z&#x27;&quot;, databaseName);influxDB.query(query, 0, queryResult -&gt; &#123;    System.out.println(queryResult.getResults());&#125;);\n\nInfluxDB的关键概念InfluxDB专为时间序列数据而构建。关系数据库可以处理时间序列数据，但没有针对常见的时间序列工作负载进行优化。InfluxDB旨在存储大量时间序列数据并快速对该数据执行实时分析。\ntime就是主键在InfluxDB中，时间戳标识就是主键。这就像一个SQL数据库表，其中主键是系统预先设置的，并且始终是时间戳。\n关键词汇\ndatabase 同MySQL都代表数据库\nmeasurement 同MySQL中的表\npoint 同MySQL中的一行数据\ntime 数据库记录的时间是主键，自动生成\nfield 可以理解为MySQL中非索引column\ntag 可以理解为MySQL中索引column\nseries measurement相同、field的key相同、tag的key、value相同的数据集\n\nInfluxDB不是CRUDInfluxDB是一个针对时间序列数据进行了优化的数据库。这些数据通常来自分布式传感器组、大型网站的点击数据或金融交易列表等来源。这些数据的一个共同点是它在聚合中更有用。一篇文章说您的计算机的CPU在星期二 12:38:35 UTC 的利用率为 12%，很难从中得出结论。当与该系列的其余部分结合并可视化时，它会变得更加有用。这是随着时间的推移开始显示趋势的地方，并且可以从数据中得出可行的见解。另外，时序数据一般只写一次，很少更新。结果是InfluxDB不是一个完整的CRUD数据库，而是更像一个CR-ud，将创建和读取数据的性能优先于更新和销毁，并防止一些更新和销毁行为以使创建和读取性能更高：\n\n要更新一个点，请插入一个具有相同measurement、tag和timehe的点。\n您可以删除或删除一个系列，但不能基于字段值删除单个点。作为一种解决方法，您可以搜索字段值，检索时间，然后根据time字段删除。\n您还不能更新或重命名标签 - 请参阅 GitHub 问题#4157了解更多信息。要修改一系列点的标记，请找到具有违规标记值的点，将值更改为所需的值，将点写回，然后删除具有旧标记值的系列。\n您不能按tag删除tags -请参阅 GitHub 问题 #8604。\n\n设计表上的注意点\n将查询、分组中常用的值作为tag字段，其它不常用的使用field字段\n不要创建过多的tag字段，这意味着按标签查询比按字段查询更高效。但是当创建的索引过多时，写入和读取都可能开始变慢。\n使用推荐的命名约定\n避免在标签和字段键中保留关键字\n避免标签和字段使用相同的名称\n避免在测量和键中编码数据\n\n\n\n\n\n\n\n\n\n\n\n\n详细文档可查看官方文档 https://docs.influxdata.com/influxdb/v1.8/concepts/schema_and_data_layout&#x2F;#avoid-reserved-keywords-in-tag-and-field-keys关于InfluxDB设计上的见解和权衡可参考官方文档https://docs.influxdata.com/influxdb/v1.8/concepts/insights_tradeoffs&#x2F;\n","slug":"InfluxDB的入门","date":"2022-09-11T15:30:06.000Z","categories_index":"InfluxDB","tags_index":"InfluxDB","author_index":"如峰"},{"id":"d1bd2738cb3df5b91e8dbed191b9a6e0","title":"java开发手册一面向对象","content":"声明此文章根据书籍《码出高效：Java开发手册》整理的读后笔记。仅交流学习使用。\n引言面向对象编程(ec -Ori te Programming, OOP)是划时代的编程思想变革，推动了高级语言的快速发展和工业化进程。OOP的抽象、封装、继承、多态的理念使软件大规模化成为可能，有效地降低了软件开发成本、维护成本和复用成本。面向对象编程思想完全不同于传统的面向过程编程思想，使大型软件的开发就像措积木样隔离可控、高效简单 是当今编程领域的一股势不可当的潮流。 OOP实践了软件工程的三个主要目标可维护性、可重用性和可扩展性。甚至JavaScript从ES6后也开始加入class等关键词，朝OOP靠拢。\nOOP理念传统意义上面向对象有三大特性封装、继承、多态。本书明确将抽象为面向对象的特性之一，支持面向对象“四大特性”的说法。\n抽象Java之父Gosling设计的Object类，是任何类的默认父类，是对万事万物的抽象，高度概括了事物的自然行为和社会行为。我们都知道哲学的三大经典问题我是谁，我从哪里来，我到哪里去。在Object类中，这些问题都可以得到隐约的解答。\n\n我是谁: getClass()说明本质上是谁，而toString()是当前职位的名片。\n我从哪里里来: Object()构造方法是生产对象的基本步骤， clone()是繁殖对象的另一种方式\n我到哪里去: finalize()是在对象销毁时触发的方法。\n世界是否因你不同: hashCode()、equals()就是判断与其他元素是否相同的组方法。\n与他人枉何协调: wait()和notify()是对象间通信与协作的一组方法。\n\n\n\n\n\n\n\n\n\n\n随着时代的发展，当初的抽象模型部分不适用当下的技术潮流，比如finalize()方法在JDK9之后直接被标记为过时方法。而wait()和 notify()同步方式事实上已经被同步信号、锁、阻塞集合等取代。\n浅拷贝与深拷贝\n浅拷贝：只复制当前对象的所有基本数据类型，以及相应的引用变量，但没有复制引用变量指向的实际对象。\n彻底深拷贝：是在成功clone一个对象之后，此对象与母对象在任何引用路径上都不存在共享的实例对象，但是引用路径递归越深，则越接近JVM对象，且发现彻底深拷贝实现难度越大。\n深拷贝：介于浅拷贝和彻底深拷贝之间的都是一般深拷贝\n\n\n\n\n\n\n\n\n\n\n慎用Object.clone()方法来拷贝对象，因为对象的clone()方法默认是浅拷贝，若想实现深拷贝，则需要覆写clone()方法实现引用对象的深度遍历式拷贝。作者认为彻底深拷贝是与深拷贝不同的，但是实际中我们会认为深拷贝就是彻底深拷贝。就例如0.999…无限循环小数和1(或者固定位数的0.99..)在数学里是不等的，但是在生活中为了方便我们会认为0.999…无限循环小数约等于1(或者固定位数的0.99..)，即两者是相等的。\n封装封装是在抽象基础上决定信息是否公开，以及公开等级，核心问题是以什么样的方式暴露哪些信息。抽象是要找到属性和行为的共性，属性是行为的基本生产资料，具有一定的敏感性，不能直接对外暴露；封装的主要任务是对属性、数据、部分内部敏感行为实现隐藏。对属性的访问与修改必须通过定义的公共接口来进行，某些敏感方法或者外部不需要感知的复杂逻辑处理，一般也会进行封装。封装使面向对象的耦合度变弱，有利于维护。而在Java中就是通过设置属性为private或者其它访问等级，限制属性的访问，让外部只能通过getter&#x2F;setter去访问属性。\n继承继承是面向对象编程技术的基石，允许创建具有逻辑等级结构的类体系形成一个继承树，让软件在业务多变的客观条件下，某些基础模块可以被直接复用、间接复用或增强复用，父类的能力通过这种方式赋予子类。继承把枯燥的代码世界变得更有层次感，更有扩展性，为多态打下语法基础。\n\n\n\n\n\n\n\n\n\n继承是is-a的关系。判断标准即是否符合里氏代换原则(Liskov Substitution Principle, LSP)。LSP是指任何父类能够出现的地方，子类都能够出现。从字面上很难深入理解，先打个比方警察在枪战片中经常说放下武器，把手举起来！而对面的匪徒们有的使用手枪，有的使用匕首，这些都是武器的子类。父类出现的地方，即“放下武器” 那么，放下手枪，是对的，放下匕首，也是对的。在实际代码环境中，如果父类引用直接使用子类引用来代替，可以编译正确并执行，输出结果符合子类场景的预期，那么说明两个类之间符合LSP原则，可以使用继承关系。\n多态多态是以上述的三个面向对象特性为基础，根据运行时的实际对象类型，同一个方法产生不同的运行结果，使同一个行为具有不同的表现形式。多态提升了对象的扩展能力和运行时的丰富想象力。而重写和重载就是多态的实现方式。\n重载和重写\n重写：是子类实现接口或者继承父类时，保持方法签名完全相同，实现不同的方法体，是垂直方向上行为的不同体现。是运行上的多态性。重写时遵循两同两小一大原则。\n两同：方法名相同，参数列表相同\n两小：子类返回值类型小于等于父类返回值类型(返回值为基本数据类型时，必须相等);子类抛出的异常小于等于父类抛出的异常\n一大：子类访问控制修饰符大于等于父类访问控制修饰符\n\n\n重载：方法名称相同但是参数类型或参数个数是不相同的，不考虑修饰符以及返回值，是水平上行为的不同体现。是编译上的多态性。\n\n","slug":"Java开发手册—面向对象","date":"2022-07-18T15:30:06.000Z","categories_index":"面向对象","tags_index":"Java","author_index":"如峰"},{"id":"44c25000734936b0a1dbcbaacbd8e114","title":"Mysql索引失效的几种情况","content":"引言索引在我们使用Mysql数据库时可以极大的提高效率，然而有时候因为使用上的问题导致索引失效。现在我们看看有哪几种情况索引失效。\n转换索引数据类型不一致1SELECT * FROM user WHERE height= 180; // 其中height是varchar类型\n\n因为height是varchar类型，而where条件180是Number类型，数据类型不一致，索引失效。\n数据的字符集不一致1SELECT * FROM oc_order oo join orders_detail od ON oo.order_id = od.order_id; // 其中oo.order_id是utf8mb4, od.order_id是utf8字符集\n\n因为oo.order_id与od.order_id，使用的字符集不一致，索引失效。\n索引使用函数1SELECT * FROM user WHERE DATE(create_time) = &#x27;2020-09-03&#x27;; // create_time是索引字段\n\n对索引字段create_time使用了DATE()函数，导致索引失效\n索引使用了表达式计算1SELECT * FROM user WHERE age - 1 = 20;\n\n对索引字段age使用了-法运算，导致索引失效\n\n\n\n\n\n\n\n\n\n总结其中**索引使用了函数、表达式计算，对索引做了转换，导致索引的排序失效而不走索引，其中字符集不一致、类型不一致，导致Mysql做了隐式转换，**导致索引的排序失效而不走索引\n索引使用了不等于判断1234567select num from student where student_id &lt;&gt; 10 ;       // 不走索引select num from student where student_id != 10 ;       // 不走索引select num from student where student_id is not Null ; // 不走索引select num from student where student_id is Null ;     // 走索引\n\n其中&lt;&gt;、!= 的不相等判断时，B+树查找不等于时，只能一个个查找进行判断，而 is not Null 是不等于Null所以不走索引，而is Null是等于Null所以走索引\n\n\n\n\n\n\n\n\n\n不相等判断B+树必须全表扫描导致索引失效\n违反最左原则最左前缀原则：\n\n即如果你创建一个联合索引, 那 这个索引的任何前缀都会用于查询, (col1, col2, col3)这个联合索引的所有前缀 就是(col1), (col1, col2), (col1, col2, col3), 包含这些列的查询都会启用索 引查询.\n其他所有不在最左前缀里的列都不会启用索引, 即使包含了联合索引里的部分列 也不行. 即上述中的(col2), (col3), (col2, col3)都不会启用索引去查询.\n\norder By1234select * from user where name = &#x27;zhangsan&#x27; and age = 20 order by age,pos; // 其中(age,pos)为联合索引, 走索引select name,age from user where name = &#x27;zhangsan&#x27; order by pos;          // 违反最左前缀原则, 不走索引\n\n违反最左前缀法则，不仅索引失效，而且导致额外的文件排序（会降低性能）。\ngroup By123select * from user where name = &#x27;zhangsan&#x27; and age = 20 order by age,pos; // 其中(age,pos)为联合索引, 走索引select name,age from user where name = &#x27;zhangsan&#x27; order by pos;           // 违反最左前缀原则, 不走索引\n\n\n违反最左前缀法则，不仅索引失效，而且导致产生临时表（会降低性能）。\nlike123select id,address from t_user where address like &#x27;%海淀区%&#x27;; // 不走索引select id,address from t_user where address like &#x27;海淀区%&#x27;;  // 走索引select id,address from t_user where address like &#x27;%海淀区&#x27;;  // 不走索引\n%在字段的左边则会不符合最左原则，导致索引失效\nortxt[object Object]如果or要使用索引，必须or左右两边都是索引字段。当然如果or左右两边都是索引字段，但是Mysql判断走全表扫描快也不会走索引。\n\n\n\n\n\n\n\n注意\n当Mysql判断全表扫表比走索引快时索引也会失效\n\n\n","slug":"Mysql索引失效的几种情况","date":"2022-06-14T03:30:06.000Z","categories_index":"Mysql","tags_index":"MySQL","author_index":"如峰"},{"id":"2c03d9b1a2276865a0e94d2f6eb59bcd","title":"Mysql索引 - 为什么使用B+树","content":"引言通过分析哈希索引、平衡二叉树、B树、B+树来判断Mysql为什么使用B+树。\n\n\n\n\n\n\n\n\n\n其中文章中使用的数据结构可视化地址能够更好的帮助大家了解这四种索引方式。\n哈希树通过哈希算法计算值的键，以键值对的方式存储数据。\n\n可以看到插入了[0，1，2，3，4，55]，而[3，55]的哈希值相同而放在同一键下，并以链式的方式存储。这种方式查找单个值十分迅速，只需反向计算出哈希值就能定位到键并通过键找到值。但是因为哈希值是没有顺序的所以没有办法进行范围查找，而且有可能有些值得到的哈希值相同。\n平衡二叉树平衡树指的是，任意节点的子树的高度差都小于等于1。\n\n可以看到插入0~10，生成了一棵深度为三的树，当我们查询3的时候需要查询2次:\n\n3 &lt; 4进入到左边节点向下查询\n3 &gt; 2进入到右边节点向下查询，右边节点等于三，则停止\n\n因此查询速度是由这棵树的深度决定，数据量越大则深度越大，速度越慢，且范围查找十分困难。\nB树是一个节点可以存储超过2个元素、可以拥有超过2个子节点的多路平衡查找树\n\n可以看到插入0 ~ 14，生成了一棵深度为三的树，当我们查询3的时候需要查询2次，搜索方式也是和平衡二叉树相似\n\n先在节点内部从小到大（从左到右）开始搜索元素，如果命中，搜索结束;\n如果未命中，再去对应的子节点中搜索元素，然后重复步骤\n\n它的缺点是每个节点都存储了索引和业务数据，业务数据的大小可能远远超过了索引数据的大小，每次为了查找对比计算，需要把数据加载到内存以及CPU高速缓存中时，都要把索引数据和无关的业务数据全部查出来。本来一次就可以把所有索引数据加载进来，现在却要多次才能加载完。如果所对比的节点不是所查的数据，那么这些加载进内存的业务数据就毫无用处，全部抛弃，如果十分占内存可能每个节点能存储的数据相当少导致深度变大，速度变慢，且范围查找也十分不方便\nB+树B+ 树就是为了拆分索引数据与业务数据的平衡多叉树。相比B树非叶子节点不记录业务数据，且叶子节点根据顺序互相链接。\n\n可以看到插入0 ~ 10，生成了一棵深度为三的树，当我们查询3的时候需要查询2次，因为根节点和子节点不存储业务数据，则非叶子节点能够存储的元素就相当多，保证深读不会多大，且叶子节点会互相链接，范围查找就相当方便，例如要查找 &gt;2的数据，只需找到2并根据链接向右查找。\nMysql的主键树如图：\n\n可以看到树从上到下从左到右都是有顺序的，所以这也是Mysql的ID优先使用主键自增，而不使用UUID。因为使用UUID当遇到插入、删除时，可能需要重新排序，而到导致需要修改整颗，十分耗时。如果Mysql里没有创建ID，则会默认创建一个隐式主键Id，用来创建B+树，而创建其它索引时，也会根据此索引创建B+树，但是叶子节点存储的业务数据是主键，所以根据索引查找数据时，将会查找两次树，一次在索引B+树上找到主键，再在主键B+树上查找数据。而这颗索引树也是会消耗空间和维护成本，所以不要在不必要的时候去创建索引，而且索引也尽量最小化。 \nMysql的B+树总结\n\n\n\n\n\n\n\n\n\nB+树从左至右，从上到下索引都是按照一定的顺序做排列，提高了查询速度\n非叶子节点不存储业务数据，大大增加了非叶子节点存储的元素，减少了树的深度，提高了查询速度\n叶子节点会根据顺序相互链接，提高了范围查找的方便性\n主键不使用UUID，使用自增ID，减少了插入、删除时需要重排，导致修改整颗树的可能性，减少了维护成本\nMysql的表人为的不创建主键， Mysql会隐式的创建主键\n创建的索引会创建一颗索引B+树，消耗空间且提高了维护成本，所以非必要时不要创建索引\n索引B+树叶子节点不存业务数据只存储主键，会根据主键再次查找数据\n\n\n\n","slug":"Mysql索引为什么使用B+树","date":"2022-06-13T08:30:06.000Z","categories_index":"Mysql","tags_index":"MySQL","author_index":"如峰"},{"id":"135ff637d6fd3260ea45b1df53f84b3e","title":"Java Optional的使用","content":"引言Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）。\n以前我们\n123456public static String getGender(Student student)&#123;    if(null == student)&#123;        return &quot;Unkown&quot;;    &#125;    return student.getGender();   &#125;\n\n现在\n123456public static String getGender(Student student)&#123;        return Optional.ofNullable(student)   // 创建一个student可能为空的Optional                .map(u -&gt; u.getGender())  // 如果student有值则返回学生的信息                .orElse(&quot;Unkown&quot;);        // 如果返回值为空则返回&quot;Unkown&quot;&#125;\n\nOptional的创建声明一个空的OptionalOptional&lt;Car&gt; optCar = Optional.empty(); \n依据一个非空值创建OptionalOptional&lt;Car&gt; optCar = Optional.of(car);\n\n\n\n\n\n\n\n\n\n如果car是一个null，这段代码会立即抛出一个NullPointerException，而不是等到你试图访问car的属性值时才返回一个错误。\n可接受null的OptionalOptional&lt;Car&gt; optCar = Optional.ofNullable(car)\n\n\n\n\n\n\n\n\n\n如果car是null，那么得到的Optional对象就是个空对象\nOptional的方法\n\n\n方法\n描述\n\n\n\nstatic &lt;T&gt; Optional&lt;T&gt; empty()\n返回空的 Optional 实例。\n\n\nboolean equals(Object obj)\n判断其他对象是否等于 Optional。\n\n\nOptional&lt;T&gt; filter(Predicate&lt;? super &lt;T&gt; predicate)\n如果值存在，并且这个值匹配给定的 predicate，返回一个Optional用以描述这个值，否则返回一个空的Optional。\n\n\n&lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)\n如果值存在，返回基于Optional包含的映射方法的值，否则返回一个空的Optional。\n\n\nT get()\n如果在这个Optional中包含这个值，返回值，否则抛出异常：NoSuchElementException\n\n\nint hashCode() \n返回存在值的哈希码，如果值不存在 返回 0。\n\n\nvoid ifPresent(Consumer&lt;? super T&gt; consumer)\n如果值存在则使用该值调用 consumer , 否则不做任何事情。\n\n\nboolean isPresent()\n如果值存在则方法会返回true，否则返回 false。\n\n\n&lt;U&gt;Optional&lt;U&gt; map(Function&lt;? super T,? extends U&gt; mapper)\n如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的Optional作为map方法返回值，否则返回空Optional。\n\n\nstatic &lt;T&gt; Optional&lt;T&gt; of(T value)\n返回一个指定非null值的Optional。\n\n\nstatic &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)\n如果为非空，返回 Optional 描述的指定值，否则返回空的 Optional。\n\n\nT orElse(T other)\n如果存在该值，返回值， 否则返回 other。\n\n\nT orElseGet(Supplier&lt;? extends T&gt; other)\n如果存在该值，返回值， 否则触发 other，并返回 other 调用的结果。\n\n\n&lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)\n如果存在该值，返回包含的值，否则抛出由 Supplier 继承的异常。\n\n\nString toString()\n返回一个Optional的非空字符串，用来调试。\n\n\nOptional的示例从Optional对象中提取和转换值1234person.flatMap(Person::getCar)  // 获取员工的汽车对象    .flatMap(Car::getInsurance) // 获取汽车的保险公司对象    .map(Insurance::getName)    // 获取保险公司名称    .orElse(&quot;Unknown&quot;);         // 如果Optional的结果值为空，设置默认值\n\n\n\n\n\n\n\n\n\n不用以前层层判断对象是否为空，再继续执行代码了\n使用filter剔除特定的值以前\n1234Insurance insurance = ...; if(insurance != null &amp;&amp; &quot;CambridgeInsurance&quot;.equals(insurance.getName()))&#123;     System.out.println(&quot;ok&quot;); &#125;\n使用Optional对象的filter方法，这段代码可以重构如下:\n1234Optional&lt;Insurance&gt; optInsurance = ...; optInsurance.filter(insurance -&gt; &quot;CambridgeInsurance&quot;.equals(insurance.getName())) // 根据条件过滤值    .ifPresent(x -&gt; System.out.println(&quot;ok&quot;));                                     // 如果值存在则打印输出    ","slug":"Java Optional的使用","date":"2022-06-08T06:30:06.000Z","categories_index":"java,Optional","tags_index":"java,Optional","author_index":"如峰"},{"id":"c89fcf3f80f5323c4d2b7488e0aabc7d","title":"Java文档注释","content":"引言Java 支持三种注释方式。前两种分别是 // 和 /* */，第三种被称作说明注释，它以 /** 开始，以 */结束。说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。\nJavaDoc标签\n\n\n标签\n描述\n示例\n\n\n\n@author\n标识一个类的作者\n@author description\n\n\n@deprecated\n指名一个过期的类或成员\n@deprecated description\n\n\n{@docRoot}\n指明当前文档根目录的路径\nDirectory Path\n\n\n@exception\n标志一个类抛出的异常\n@exception exception-name explanation\n\n\n{@inheritDoc}\n从直接父类继承的注释\nInherits a comment from the immediate surperclass.\n\n\n{@link}\n插入一个到另一个主题的链接\n{@link name text}\n\n\n{@linkplain}\n插入一个到另一个主题的链接，但是该链接显示纯文本字体\nInserts an in-line link to another topic.\n\n\n@param\n说明一个方法的参数\n@param parameter-name explanation\n\n\n@return\n说明返回值类型\n@return explanation\n\n\n@see\n指定一个到另一个主题的链接\n@see anchor\n\n\n@serial\n说明一个序列化属性\n@serial description\n\n\n@serialData\n说明通过writeObject( ) 和 writeExternal( )方法写的数据\n@serialData description\n\n\n@serialField\n说明一个ObjectStreamField组件\n@serialField name type description\n\n\n@since\n标记当引入一个特定的变化时\n@since release\n\n\n@throws\n和 @exception标签一样.\nThe @throws tag has the same meaning as the @exception tag.\n\n\n{@value}\n显示常量的值，该常量必须是static属性。\nDisplays the value of a constant, which must be a static field.\n\n\n@version\n指定类的版本\n@version info\n\n\n内嵌HTMLpre标签&lt;pre&gt;&lt;/pre&gt;标签会保留原文档的格式。当文档需要换行、空格时可以使用此标签\n123456// javadoc/Documentation2.java/** &lt;pre&gt;* System.out.println(new Date());* &lt;/pre&gt;*/public class Documentation2 &#123;&#125;\n\n其它HTML标签我们还可以使用HTML来格式化说明中的文字\n123456789// javadoc/Documentation3.java/** You can &lt;em&gt;even&lt;/em&gt; insert a list:* &lt;ol&gt;* &lt;li&gt; Item one* &lt;li&gt; Item two* &lt;li&gt; Item three* &lt;/ol&gt;*/public class Documentation3 &#123;&#125;\n\n\n\n\n\n\n\n\n\n请注意，在文档注释中，Javadoc会删除行首的星号以及前导空格。 Javadoc重新格式化了所有内容，使其符合文档的标准外观。不要将&lt;h1&gt; 和&lt;hr&gt; 之&gt;类的标题用作嵌入式HTML，因为Javadoc会插入自己的标题，你插入的标题将对其产生干扰。\n常用说明注释标签@see这个标签可以将其它的类链接到本文档中。Javadoc 用 @see 标签产生链接到其它类的的HTML。这个标签可以将其它的类链接到本文档中。Javadoc 用 @see 标签产生链接到其它类的的HTML。\n12345678910111213// @see必须顶头写,前面不能有任何内容@see classname                             // 类名@see fully-qualified-classname             // 完全限定类名@see fully-qualified-classname#method-name // 完全限定类名#方法名// 链接跳转地址@see &lt;a href=&quot;[https://](https://www.runoob.com/java/java-documentation.html)&quot;&gt;JavaDoc菜鸟教程&lt;/a&gt;/** * @see Student * @see top.join.Student * @see Student#getStudentId() */public class DataExample()&#123;&#125;\n\n{@link}与{@linkplain}与@see非常相似，不同之处在于它们可以内联使用(不同顶头写)，并使用标签作为超链接文本。不过&#123;@linkplain&#125;可以自定义显示文本\n123456789101112131415// &#123;@link&#125;无需顶头写中文&#123;@link classname&#125;中文                      // 类名&#123;@link fully-qualified-classname&#125;             // 完全限定类名&#123;@link fully-qualified-classname#method-name&#125; // 完全限定类名#方法名&#123;@linkplain classname 文本内容&#125;// 链接跳转地址&#123;@link &lt;a href=&quot;[https://](https://www.runoob.com/java/java-documentation.html)&quot;&gt;JavaDoc菜鸟教程&lt;/a&gt;&#125;/** * 学生&#123;@link Student&#125; * &#123;@link top.join.Student&#125; * &#123;@link Student#getStudentId()&#125; * &#123;@linkplain Student 学生&#125; */public class DataExample()&#123;&#125;\n\n@version用于标记当前版本，默认为1.0\n@since一般用于标记文件创建时项目当时对应的版本，一般后面跟版本号，也可以跟是一个时间，表示文件当前创建的时间\n@throws一个方法可以产生许多不同类型的异常，所有这些异常都需要描述。\n123456@throws fully-qualified-class-name description // 完全限定类名 异常描述/** * * @throws IllegalArgumentException when the given source contains invalid encoded sequences */\n\n@deprecated指名一个过期的类或方法,所以一定要说明为什么过期或者用什么方法做替换\n{@value}用于标注在常量上，{@value} 用于表示常量的值\n1234567891011121314/** *  * 用在类上需要指定是哪一个常量 * 默认数量1 &#123;@value QTY_A&#125;  * 默认数量2 &#123;@value QTY_B&#125;   */public class DataExample &#123;    /** 默认数量1 &#123;@value&#125;*/    public final static Integer QTY_A = 1;    /** 默认数量2 &#123;@value&#125;*/    public final static Integer QTY_B = 1;&#125;    \n\ncode&#123;@code text&#125; 会被解析成&lt;code&gt; text &lt;/code&gt;将文本标记为代码样式的文本，在code内部可以使用 &lt; 、&gt; 等不会被解释成html标签, code标签有自己的样式。一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。\n1234567891011121314151617181920/** * Check whether the given &#123;@code CharSequence&#125; contains actual &lt;em&gt;text&lt;/em&gt;. * &lt;p&gt;More specifically, this method returns &#123;@code true&#125; if the * &#123;@code CharSequence&#125; is not &#123;@code null&#125;, its length is greater than * 0, and it contains at least one non-whitespace character. * &lt;p&gt;&lt;pre class=&quot;code&quot;&gt; * StringUtils.hasText(null) = false * StringUtils.hasText(&quot;&quot;) = false * StringUtils.hasText(&quot; &quot;) = false * StringUtils.hasText(&quot;12345&quot;) = true * StringUtils.hasText(&quot; 12345 &quot;) = true * &lt;/pre&gt; * @param str the &#123;@code CharSequence&#125; to check (may be &#123;@code null&#125;) * @return &#123;@code true&#125; if the &#123;@code CharSequence&#125; is not &#123;@code null&#125;, * its length is greater than 0, and it does not contain whitespace only * @see Character#isWhitespace */public static boolean hasText(@Nullable CharSequence str) &#123;\treturn (str != null &amp;&amp; str.length() &gt; 0 &amp;&amp; containsText(str));&#125;","slug":"Java文档注释","date":"2022-06-07T10:30:06.000Z","categories_index":"java,注释","tags_index":"java,注释","author_index":"如峰"},{"id":"21734e1cbf39a356733db81c004c61e6","title":"Java Stream 流式编程","content":"引言流是Java API的新成员，它允许你以声明性方式处理数据集合（通过查询语句来表达，而不是临时编写一个实现）。就现在来说，你可以把它们看成遍历数据集的高级迭代器。此外，流还可以透明地并行处理，你无需写任何多线程代码了！\n流创建通过集合123456// 创建一个集合List&lt;Integer&gt; list = new ArrayList&lt;&gt;();// 得到一个顺序流Stream&lt;Integer&gt; stream = list.stream();// 得到一个并行了流Stream&lt;Integer&gt; parallelStream = list.parallelStream();\n\n通过数组1234// 先创建一个数组int[] arr = new int[]&#123;1, 2, 3, 4, 5, 6&#125;;// 使用数组Arrays工具类获取Stream流IntStream stream = Arrays.stream(arr);\n\n通过of1Stream&lt;Integer&gt; stream = Stream.of(1,2,3,4,5,6);\n\n创建无限流1234567// 无限流之迭代方式// 创建了10个元素从0到18, 第一个参数是初始值、第二个参数决定下一个生成值的规则Stream&lt;Integer&gt; streamI =  Stream.iterate(0, t -&gt; t + 2).limit(10);        // 无限流之生成方式// 创建了10个随机数Stream&lt;Double&gt; streamG =  Stream.generate(Math::random).limit(10);\n\n构造器模式12Stream&lt;Integer&gt; stream = Stream.&lt;Integer&gt;builder().add(1).add(2).build();stream.forEach(System.out::print);\n\n流的常用操作中间操作与终端操作java.util.stream.Stream中的Stream接口定义了许多操作。它们可以分为两大类。我们来看一下例子：\n12345List&lt;String&gt; names = menu.stream()     .filter(d -&gt; d.getCalories() &gt; 300)    .map(Dish::getName)     .limit(3)     .collect(toList()); \n\n你可以看到两类操作：\n\nfilter、map和limit可以连成一条流水线；\ncollect触发流水线执行并关闭它。\n\n\n\n\n\n\n\n\n可以连接起来的流操作称为中间操作，关闭流的操作称为终端操作。\n\n\n\n\n\n\n\n\n\n警告\n使用终端操作代表消费流结束,想要重新消费必须重新构建流。\n\n\n常用操作API\n\n\n操作\n类型\n返回类型\n操作参数\n函数描述符\n功能描述\n\n\n\nfilter\n中间\nStream&lt;T&gt;\nPredicate&lt;T&gt;\nT -&gt; boolean\n过滤\n\n\ndistinct\n中间\nStream&lt;T&gt;\n\n\n去重\n\n\nskip\n中间\nStream&lt;T&gt;\nlong\n\n跳过元素\n\n\nlimit\n中间\nStream&lt;T&gt;\n\n\n截短\n\n\nmap\n中间\nStream&lt;R&gt;\nFunction&lt;T, R&gt;\nT -&gt; R\n映射\n\n\nflatMap\n中间\nStream&lt;R&gt;\nFunction&lt;T, Stream&lt;R&gt;&gt;\nT -&gt; Stream&lt;R&gt;\n展平\n\n\nsorted\n中间\nStream&lt;T&gt;\nComparator&lt;T&gt;\n(T, T) -&gt; int\n排序\n\n\npeek\n中间\nStream&lt;T&gt;\nConsumer&lt;T&gt;\nT -&gt; void\n消费流中的每个元素，主要用于调试\n\n\nanyMatch\n终端\nboolean\nPredicate&lt;T&gt;\nT -&gt; boolean\n是否至少匹配一个元素\n\n\nnoneMatch\n终端\nboolean\nPredicate&lt;T&gt;\nT -&gt; boolean\n是否匹配所有元素\n\n\nallMatch\n终端\nboolean\nPredicate&lt;T&gt;\nT -&gt; boolean\n是否没有任何元素匹配\n\n\nfindAny\n终端\nOptional&lt;T&gt;\n\n\n查找所有元素\n\n\nfindFirst\n终端\nOptional&lt;T&gt;\n\n\n查找第一个元素\n\n\nforeach\n终端\nvoid\nConsumer&lt;T&gt;\nT -&gt; void\n消费流中的每个元素并对其应用Lambda。这一操作返回void\n\n\ncollect\n终端\nR\nT -&gt; void\n\n把流归约成一个集合，比如List、Map 甚至是Integer\n\n\nreduce\n终端\nOptional&lt;T&gt;\nBinaryOperator&lt;T&gt;\n(T, T) -&gt; T\n归约\n\n\ncount\n终端\nlong\n\n\n查找第一个元素\n\n\n实际场景筛选和切片\nfilter: 根据传入的Predicate函数式接口, 返回一个包括所有符合条件元素的流\ndistinct: 返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流\nskip: 返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一个空流\nlimit: 该方法会返回一个不超过给定长度的流。如果流是有序的,则最多返回前n个元素\n\n1234567List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4, 6, 8); numbers.stream()  .filter(i -&gt; i % 2 == 0) // 过滤出偶数 .distinct()              // 相同的数字删除 .skip(1)                 // 跳过第一个元素 .limit(2)                // 取出前两个数 .forEach(System.out::println); // 4, 6  \n\n映射和展平\nmap: 它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素\nflatMap: 它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素\n\n123456List&lt;String&gt; words = Arrays.asList(&quot;Hello&quot;,&quot;World&quot;);List&lt;String&gt; uniqueCharacters = words.stream()        .map(w -&gt; w.split(&quot;&quot;))    // 映射成一组字符数组        .flatMap(Arrays::stream)  // 数组展平成一个数组        .distinct()               // 字符去重        .collect(Collectors.toList());\n\n查找和匹配\nanyMatch: 流中是否有一个元素能匹配给定的条件\nnonneMatch: 流中是否没有一个元素能匹配给定的条件 \nfindAny: 方法将返回当前流中的任意元素\nfindFirst: 方法将返回当前流中的第一个元素\n\n1234567891011121314151617181920// anyMatchif(menu.stream().anyMatch(Dish::isVegetarian))&#123;     System.out.println(&quot;The menu is (somewhat) vegetarian friendly!!&quot;); &#125;// nonneMatchboolean isHealthy = menu.stream()     .noneMatch(d -&gt; d.getCalories() &gt;= 1000);// findAny Optional&lt;Dish&gt; dish = menu.stream()     .filter(Dish::isVegetarian)     .findAny(); // findFirstList&lt;Integer&gt; someNumbers = Arrays.asList(1, 2, 3, 4, 5); Optional&lt;Integer&gt; firstSquareDivisibleByThree = someNumbers.stream()     .map(x -&gt; x * x)     .filter(x -&gt; x % 3 == 0)     .findFirst(); // 9 \n\n归约和汇总\nreduce: reduce 操作可以实现从一组值中生成一个值\nmax: 获取最大值\nmin: 获取最小值\ncount: 获取总数\nCollectors.joining: 字符串合并\n\n1234567891011121314151617181920212223List&lt;Integer&gt; nums = Arrays.asList(1,4,5,6,78);// maxInteger max = nums.stream().max(Integer::compare).get(); // 78// minInteger min = nums.stream().min(Integer::compare).get(); // 1// countLong count = nums.stream().count(); // 5// reduce 求和Integer sum = nums.stream().reduce(Integer::sum).get(); // 94List&lt;String&gt; names = Arrays.asList(&quot;Zebe&quot;, &quot;Hebe&quot;, &quot;Mary&quot;, &quot;July&quot;, &quot;David&quot;);// 字符串合并// 拼接成 [x, y, z] 形式String result1 = names.stream().collect(Collectors.joining(&quot;, &quot;, &quot;[&quot;, &quot;]&quot;));// 拼接成 x, y, z 形式String result2 = names.stream().collect(Collectors.joining(&quot;,&quot;));// 拼接成 xyz 形式String result3 = names.stream().collect(Collectors.joining());\n\n分组和分区\nCollectors.groupingBy: 对数据按一定规则分组\nCollectors.partitioningBy: 分区是分组的特殊情况：由一个谓词（返回一个布尔值的函数）作为分类函数，它称分区函数\n\n123456789101112131415161718192021List&lt;Student&gt; stuList = new ArrayList&lt;Student&gt;();Student stu1 = new Student(&quot;10001&quot;, &quot;孙权&quot;, &quot;1000101&quot;, 16, &#x27;男&#x27;);Student stu2 = new Student(&quot;10001&quot;, &quot;曹操&quot;, &quot;1000102&quot;, 16, &#x27;男&#x27;);Student stu3 = new Student(&quot;10002&quot;, &quot;刘备&quot;, &quot;1000201&quot;, 16, &#x27;男&#x27;);Student stu4 = new Student(&quot;10002&quot;, &quot;大乔&quot;, &quot;1000202&quot;, 16, &#x27;女&#x27;);Student stu5 = new Student(&quot;10002&quot;, &quot;小乔&quot;, &quot;1000203&quot;, 16, &#x27;女&#x27;);Student stu6 = new Student(&quot;10003&quot;, &quot;诸葛亮&quot;, &quot;1000301&quot;, 16, &#x27;男&#x27;);// 按班级分组Map&lt;String, List&lt;Student&gt;&gt; collect = stuList.stream()    .collect(Collectors.groupingBy(Student::getClassId)); // &#123;&quot;10001&quot;:[], ...&#125;// 或者使用Collectors.toMap按班级分组Map&lt;String, List&lt;Student&gt;&gt; collect1 = stuList.stream()        .collect(Collectors.toMap(Student::getClassId,                stu -&gt; new ArrayList&lt;Student&gt;()&#123;&#123;add(stu);&#125;&#125;,                (a,b) -&gt; &#123;a.addAll(b);return a;&#125;));       // &#123;&quot;10001&quot;:[], ...&#125;// 按性别分组Map&lt;Boolean, List&lt;Student&gt;&gt; collect2 = stuList.stream()    .collect(Collectors.partitioningBy(stu -&gt;     Objects.equals(&#x27;男stu.getSex())));                    // &#123;&quot;false&quot;:[], &quot;true&quot;: []&#125;\n\n收集器收集器非常有用，因为用它可以简洁而灵活地定义collect用来生成结果集合的标准。更具体地说，对流调用collect方法将对流中的元素触发一个归约操作（由Collector来参数化）。例如上述的Collectors.groupingBy、Collectors.partitioningBy\n常用Collectors类的静态工厂方法\n\n\n工厂方法\n返回类型\n用于\n\n\n\ntoList\nList&lt;T&gt;\n把流中所有项目收集到一个 List\n\n\n使用示例: List&lt;Dish&gt; dishes = menuStream.collect(toList());\n\n\n\n\ntoSet\nSet&lt;T&gt;\n把流中所有项目收集到一个 Set，删除重复项\n\n\n使用示例: ：Set&lt;Dish&gt; dishes = menuStream.collect(toSet());\n\n\n\n\ntoCollection\nCollection&lt;T&gt;\n把流中所有项目收集到给定的供应源创建的集合\n\n\n使用示例: java Collection&lt;Dish&gt; dishes = menuStream.collect(toCollection(), ArrayList::new);\n\n\n\n\ncounting\nLong\n计算流中元素的个数\n\n\n使用示例: long howManyDishes = menuStream.collect(counting());\n\n\n\n\nsummingInt\nInteger\n对流中项目的一个整数属性求和\n\n\n使用示例: int totalCalories = menuStream.collect(summingInt(Dish::getCalories));\n\n\n\n\naveragingInt\nDouble\n计算流中项目 Integer 属性的平均值\n\n\n使用示例: double avgCalories = menuStream.collect(averagingInt(Dish::getCalories));\n\n\n\n\nsummarizingInt\nIntSummaryStatistics\n收集关于流中项目 Integer 属性的统计值，例如最大、最小、总和与平均值\n\n\n使用示例: IntSummaryStatistics menuStatistics = menuStream.collect(summarizingInt(Dish::getCalories));\n\n\n\n\njoining\nString\n连接对流中每个项目调用 toString 方法所生成的字符串\n\n\n使用示例: String shortMenu = menuStream.map(Dish::getName).collect(joining(&quot;, &quot;));\n\n\n\n\nmaxBy\nOptional&lt;T&gt;\n一个包裹了流中按照给定比较器选出的最大元素的 Optional，或如果流为空则为 Optional.empty()\n\n\n使用示例: Optional&lt;Dish&gt; fattest = menuStream.collect(maxBy(comparingInt(Dish::getCalories)));\n\n\n\n\nminBy\nOptional&lt;T&gt;\n一个包裹了流中按照给定比较器选出的最小元素的 Optional，或如果流为空则为 Optional.empty()\n\n\n使用示例: Optional&lt;Dish&gt; lightest = menuStream.collect(minBy(comparingInt(Dish::getCalories)));\n\n\n\n\nreducing\n归约操作产生的类型\n从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值\n\n\n使用示例: int totalCalories = menuStream.collect(reducing(0, Dish::getCalories, Integer::sum));\n\n\n\n\ncollectingAndThen\n转换函数返回的类型\n包裹另一个收集器，对其结果应用转换函数\n\n\n使用示例: int howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size));\n\n\n\n\ngroupingBy\nMap&lt;K, List&lt;T&gt;&gt;\n根据项目的一个属性的值对流中的项目作问组，并将属性值作为结果 Map 的键\n\n\n使用示例: Map&lt;Dish.Type,List&lt;Dish&gt;&gt; dishesByType = menuStream.collect(groupingBy(Dish::getType));\n\n\n\n\npartitioningBy\nMap&lt;Boolean,List&lt;T&gt;&gt;\n根据对流中每个项目应用谓词的结果来对项目进行分区\n\n\n使用示例: Map&lt;Boolean,List&lt;Dish&gt;&gt; vegetarianDishes = menuStream.collect(partitioningBy(Dish::isVegetarian))\n\n\n\n\n","slug":"Java Stream 流式编程","date":"2022-06-06T07:30:06.000Z","categories_index":"java,Stream,流式编程","tags_index":"java,Stream","author_index":"如峰"},{"id":"2b987db277ec8f53b5baaa150ea429a6","title":"Java函数式编程","content":"引言什么是函数式编程，即可以把方法当做参数或者返回值传递或引用。在JavaScript中函数式编程已经很常见，但是Java Function是不能作为参数引用，为此Java 8中提出了三个概念\n\n\n\n\n\n\n\n\n\n\nLambda 表达式，也可以称为闭包，但我更愿意称为定义函数的简写表达式\n方法引用，可以直接引用已有Java类或对象（实例）的方法或构造器\n函数式接口，一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口\n\nLambda 表达式java8之前函数的引用方式\n12345Arrays.sort(array, new Comparator&lt;String&gt;() &#123;    public int compare(String s1, String s2) &#123;        return s1.compareTo(s2);    &#125;&#125;);\n上述写法非常繁琐，从java8开始，我们可以使用Lambda表达式写。可以看出Lambda表达式是函数定义的简写方式，不用声明匿名类，JVM会自己帮我们做。\n123Arrays.sort(array, (String s1, String s2) -&gt; &#123;    return s1.compareTo(s2);&#125;);\nLambda表达式的基本语法(parameters) -&gt;&#123; statements; &#125;\nLambda的两个省略\n\n\n\n\n\n\n\n\n\n\n当箭头左边只有一个参数时,可省略()a =&gt; &#123;return a + 1;&#125;\n当箭头右边只有一句话时,可省略&#123;&#125;与return(a, b) =&gt; a + b;\n\n变量作用域\nLambda表达式只能引用标记了final的外层局部变量，这就是说不能在Lambda内部修改定义在域外的局部变量，否则会编译错误\nLambda表达式的局部变量可以不用声明为final，但是必须不可被后面的代码修改(即隐性的具有final的语义)\n在Lambda表达式当中不允许声明一个与局部变量同名的参数或者局部变量。\n\n例如：\n123String first = &quot;&quot;;  Comparator &lt; String &gt; comparator = (first, second) -&gt; \tInteger.compare(first.length(), second.length()); // 编译会出错\n\n12345int num = 1;  Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));s.convert(2);num = 5;  // 报错信息：Local variable num defined in an enclosing scope must be final or effectively final\n\n方法引用方法引用通过方法的名字来指向一个方法，可以使语音的构造更加紧凑，减少冗余代码，方法引用使用一对冒号。对于Arrays.sort方法,第二个参数Comparator是一个单方法接口，除了可以传入Lambda表达式，我们还可以直接传入符合要求的方法引Arrays.sort(array, String::compareTo);\n方法引用的基本语法构造器的引用语法： Class::new\n12final Car car = Car.create( Car::new );final List&lt; Car &gt; cars = Arrays.asList( car );\n\n静态方法的引用语法： Class::static_method\n1cars.forEach( Car::collide );\n\n特定类的任意对象的方法引用语法： Class::method\n1cars.forEach( Car::repair );\n\n特定对象的方法引用语法： instance::method\n12final Car police = Car.create( Car::new );cars.forEach( police::follow );\n\n函数式接口Lambda表达式、方法引用只是针对方法的简写与特殊方法引用的简写。那我们该如何将更加复杂的函数传递和引用呢？那如何先声明一个可被传递或者引用的函数呢？使用@FunctionalInterface注解创建一个函数式接口即可\n1234@FunctionalInterfaceinterface Functional &#123;  String goodbye(String message);&#125;\n\n函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。所以上面接口的实现方式可用Lambda表达式简写为\n12Functional fx = message -&gt; System.out.println(&quot;Hello &quot; + message);fx.goodbye(&quot;world!!!&quot;);\n$$ \\underbrace{message -&gt; System.out.println(“Hello “ + message)}_{函数} \\quad  \\underrightarrow{赋值} \\quad fx.goodbye $$并通过fx.goodbye(&quot;world!!!&quot;)调用。这也就是必须有且仅有一个抽象方法否则并不知道赋值给哪一个方法。\n四大函数式接口我们在使用函数式接口时，并不需要总是创建一个函数式接口。因为JAVA8已经为我们提供了常用的函数式接口。\n\n\n\n函数式接口名\n方法名\n作用\n特征\n示例\n\n\n\nSupplier\nget()  getAs类型()\n生产者函数式接口\n无参数  有返回值\nSupplier  BooleanSupplier  IntSupplier  LongSupplier  DoubleSupplier\n\n\nConsumer\naccept()\n消费者函数式接口\n单个参数  无返回值\nConsumer  IntConsumer  LongConsumer  DoubleConsumer\n\n\nPredicate\ntest()\n断言函数式接口\n2 参数  返回布尔型\nPredicate  BiPredicate  IntPredicate  LongPredicate  DoublePredicate\n\n\nFunction\napply()  applyAs类型()\n功能函数式接口\n单个参数  有返回值\nFunction  IntFunction  LongFunction  DoubleFunction  ToIntFunction  ToLongFunction  ToDoubleFunction  IntToLongFunction  IntToDoubleFunction  LongToIntFunction  LongToDoubleFunction  DoubleToIntFunction  DoubleToLongFunction\n\n\nsupplier&lt;T&gt;生产者函数式接口,无参数，返回一个T类型结果。如果返回类型是基本类型可以使用BooleanSupplier、IntSupplier、LongSupplier、DoubleSupplier\n示例\n1234567Supplier&lt;String&gt; supplier = String::new; Supplier&lt;Emp&gt; supplierEmp = Emp::new;Emp emp = supplierEmp.get();emp.setName(&quot;dd&quot;);System.out.println(supplier.get()); // &quot;&quot;System.out.println(emp.getName());  // dd\n\nConsumer&lt;T&gt;接受一个T类型输入参数并且无返回。如果T是基本类型可以使用IntConsumer、LongConsumer、DoubleConsumer,如果需要输入两个参数使用BiConsumer,如果有一个类型是Obj,一个类型是基本类型可以使用ObjIntConsumer、ObjLongConsumer、ObjDoubleConsumer\n示例\n123Emp emp = new Emp();Consumer&lt;Emp&gt; nameConsumer = emp -&gt; System.out.println(emp.getName());  nameConsumer.accept(emp); // 打印学生名字\n\nPredicate&lt;T&gt;接受一个T类型输入参数并且返回布尔值。如果T是基本类型可以使用IntPredicate、LongPredicate、DoublePredicate,如果需要输入两个参数使用BiPredicate。\n示例\n12Predicate&lt;Integer&gt; predicate = t -&gt; t &gt; 5;System.out.println(predicate.test(6)); // true \n\nFunction&lt;T,R&gt;接受一个T类型输入参数返回一个R类型参数。如果T是基本类型可以使用IntFunction、LongFunction、DoubleFunction,如果R是基本类型ToIntFunction、ToLongFunction、ToDoubleFunction,如果T和R都是基本类型可以使用IntToLongFunction、IntToDoubleFunction、LongToIntFunction、LongToDoubleFunction、DoubleToIntFunction、DoubleToLongFunction,如果需要传入两个参数可以使用BiFunction,要是BiFunction返回类型是基本类型可以使用ToIntBiFunction、ToLongBiFunction、ToDoubleBiFunction。\n示例\n12Function&lt;Integer,Integer&gt; fuc = t -&gt; t - 1;System.out.println(fuc.apply(6)); // 5 \n其它函数式接口\n\n\n函数式接口名\n作用\n\n\n\nRunnable\n不返回结果的线程\n\n\nCallable\n返回结果的线程\n\n\nUnaryOperator\n表示对同一类型的两个操作数的操作，产生与操作数相同类型的结果。\n\n\nBinaryOperator\n表示对单个操作数产生与其操作数相同类型的结果的操作。\n\n\nComparator\n对同类型的两个参数作比较\n\n\n函数组合函数组合（Function Composition）意为“多个函数组合成新函数”。它通常是函数式编程的基本组成部分。\n\n\n\n组合方法\n作用\n支持接口\n\n\n\nandThen(argument)\n执行原操作,再执行参数操作\nFunction  BiFunction  Consumer  BiConsumer  IntConsumer  LongConsumer  DoubleConsumer  UnaryOperator  IntUnaryOperator  LongUnaryOperator  DoubleUnaryOperator  BinaryOperator\n\n\ncompose(argument)\n执行参数操作,再执行原操作\nFunction  UnaryOperator  IntUnaryOperator  LongUnaryOperator  DoubleUnaryOperator\n\n\nand(argument)\n原Predicate函数式接口和参数Predicate函数式接口的短路逻辑与\nPredicate  BiPredicate  IntPredicate  LongPredicate  DoublePredicate\n\n\nor(argument)\n原Predicate函数式接口和参数Predicate函数式接口的短路逻辑或\nPredicate  BiPredicate  IntPredicate  LongPredicate  DoublePredicate\n\n\nnegate()\n该Predicate函数式接口的逻辑非\nPredicate  BiPredicate  IntPredicate  LongPredicate  DoublePredicate\n\n\n下例使用了Function里的compose()和andThen()。代码示例：\n12345678910111213141516// functional/FunctionComposition.javaimport java.util.function.*;public class FunctionComposition &#123;  static Function&lt;String, String&gt;    f1 = s -&gt; &#123;      System.out.println(s);      return s.replace(&#x27;A&#x27;, &#x27;_&#x27;);    &#125;,    f2 = s -&gt; s.substring(3),    f3 = s -&gt; s.toLowerCase(),    f4 = f1.compose(f2).andThen(f3);  public static void main(String[] args) &#123;    System.out.println(      f4.apply(&quot;GO AFTER ALL AMBULANCES&quot;));  &#125;&#125;\n输出结果：\n12AFTER ALL AMBULANCES_fter _ll _mbul_nces\n这里我们重点看正在创建的新函数f4。它调用apply()的方式与Function函数式接口几乎无异。f4组合后的新函数,compose(f2)表示f2的调用发生在f1之前,所以当f1获得字符串时，它已经被f2剥离了前三个字符。\n下例是Predicate的逻辑运算演示。代码示例：\n123456789101112131415// functional/PredicateComposition.javaimport java.util.function.*;import java.util.stream.*;public class PredicateComposition &#123;  static Predicate&lt;String&gt;    p1 = s -&gt; s.contains(&quot;bar&quot;),    p2 = s -&gt; s.length() &lt; 5,    p3 = s -&gt; s.contains(&quot;foo&quot;),    p4 = p1.negate().and(p2).or(p3);  public static void main(String[] args) &#123;    Stream.of(&quot;bar&quot;, &quot;foobar&quot;, &quot;foobaz&quot;, &quot;fongopuckey&quot;)      .filter(p4)      .forEach(System.out::println);  &#125;&#125;\n输出结果：\n12foobarfoobaz\n\np4是由p1、p2、p3组成,其判断逻辑是：如果字符串中不包含bar且长度小于5，或者它包含foo，则结果为true。正因它产生如此清晰的语法，我在主方法中采用了一些小技巧，并借用了Java Stream。首先，我创建了一个字符串对象的流，然后将每个对象传递给filter()操作。filter()使用p4的谓词来过滤。最后我们使用forEach()将println方法引用应用在每个留存的对象上。\n柯里化和部分求值将一个多参数的函数，转换为一系列单参数函数。\n12345678910111213141516171819202122// functional/CurryingAndPartials.javaimport java.util.function.*;public class CurryingAndPartials &#123;   // 未柯里化:   static String uncurried(String a, String b) &#123;      return a + b;   &#125;   public static void main(String[] args) &#123;      // 柯里化的函数:      Function&lt;String, Function&lt;String, String&gt;&gt; sum =         a -&gt; b -&gt; a + b; // [1]      System.out.println(uncurried(&quot;Hi &quot;, &quot;Ho&quot;));      Function&lt;String, String&gt;        hi = sum.apply(&quot;Hi &quot;); // [2]      System.out.println(hi.apply(&quot;Ho&quot;));      // 部分应用:      Function&lt;String, String&gt; sumHi =        sum.apply(&quot;Hup &quot;);      System.out.println(sumHi.apply(&quot;Ho&quot;));      System.out.println(sumHi.apply(&quot;Hey&quot;));   &#125;&#125;\n\n输出结果：\n1234Hi HoHi HoHup HoHup Hey\n\n\n\n\n\n\n\n\n\n 这一连串的箭头很巧妙。注意，在函数接口声明中，第二个参数是另一个函数。 柯里化的目的是能够通过提供单个参数来创建一个新函数，所以现在有了一个”带参函数”和剩下的”自由函数”(free argument)。实际上，你从一个双参数函数开始，最后得到一个单参数函数。\n我们可以通过继续添加层级来柯里化一个三参数函数:\n12345678910111213141516// functional/Curry3Args.javaimport java.util.function.*;public class Curry3Args &#123;   public static void main(String[] args) &#123;      Function&lt;String,        Function&lt;String,          Function&lt;String, String&gt;&gt;&gt; sum =            a -&gt; b -&gt; c -&gt; a + b + c;      Function&lt;String,        Function&lt;String, String&gt;&gt; hi =          sum.apply(&quot;Hi &quot;);      Function&lt;String, String&gt; ho =        hi.apply(&quot;Ho &quot;);      System.out.println(ho.apply(&quot;Hup&quot;));   &#125;&#125;\n输出结果：\n1Hi Ho Hup\n对于每一级的箭头级联(Arrow-cascading),你都会在类型声明周围包裹另一个Function。处理基本类型和装箱时,请使用适当的函数式接口：\n12345678910// functional/CurriedIntAdd.javaimport java.util.function.*;public class CurriedIntAdd &#123;  public static void main(String[] args) &#123;    IntFunction&lt;IntUnaryOperator&gt;      curriedIntAdd = a -&gt; b -&gt; a + b;    IntUnaryOperator add4 = curriedIntAdd.apply(4);    System.out.println(add4.applyAsInt(5));      &#125;&#125;\n输出结果：\n19\n\n总结在绝大多数多数的程序编写中,Lambda表达式和方法引用并配合Java Stream编程的方式的应用较多，但是函数式接口和柯里化的应用较少。个人觉得一方便绝大多数的开发还是CRUD和数据的梳理，另一方面只有在涉及到架构时或者编写通用工具方法时才有可能使用到函数式接口和柯里化。开发者在使用函数式接口和柯里化时需要从面向对象的思考方式做出部分的转变，以适应函数式编程。而且Java已经有了这么多年的历史，即使不使用函数式接口和柯里化也有成熟的解决方式，而市面上也并未有统一、成熟、全面的关于函数式接口和柯里化在Java开发中的规范要求去替代过去的方式。\n","slug":"Java函数式编程","date":"2022-05-31T13:30:06.000Z","categories_index":"java,函数式编程","tags_index":"java,函数式编程","author_index":"如峰"},{"id":"6a8b4d4d5ad2121dc1df69e7c613a802","title":"Lombok的使用一进阶篇","content":"进阶注解解析@SuperBuilder(实验性功能)是一个帮助类生成复杂的构建器 API。将循允许我们使用以下的方式去实例化对象，但是对继承的类的属性不会忽略,但是超类也必须使用此注解。使用方式可参照@Builder\n@Jacksonized(实验性功能)此注解是@Builder和@SuperBuilder的附加注解,允许他们Jackson序列化&#x2F;反序列化不被报错\n例如\n12345@Jacksonized @Builder@JsonIgnoreProperties(ignoreUnknown = true)public class JacksonExample &#123;\tprivate List&lt;Foo&gt; foos;&#125;\n@Accessors(实验性功能)使用此注解允许使用以下的链式方式调用方法,注解的fluent熟悉默认为false,设置为true时,则getter&#x2F;setter方法，没有get&#x2F;set前缀。\n1User user = new User().age(31).name(&quot;pollyduan&quot;);\n\n例如\n1234567891011121314import lombok.experimental.Accessors;import lombok.Getter;import lombok.Setter;@Accessors(fluent = true)public class AccessorsExample &#123;  @Getter @Setter  private int age = 10;&#125;class PrefixExample &#123;  @Accessors(prefix = &quot;f&quot;) @Getter  private String fName = &quot;Hello, World!&quot;;&#125;\n\n编译后的实体\n1234567891011121314151617181920public class AccessorsExample &#123;  private int age = 10;    public int age() &#123;    return this.age;  &#125;    public AccessorsExample age(final int age) &#123;    this.age = age;    return this;  &#125;&#125;class PrefixExample &#123;  private String fName = &quot;Hello, World!&quot;;    public String getName() &#123;    return this.fName;  &#125;&#125;\n\nvar关键字var替换掉了原来的val。var关键字可以让我们在定义一个变量时候不需要提前指定它的类型，它的实际的类型将由初始化的表达式推断,var声明的变量是非final的,而val声明的变量是final的。若要使用var声明final\n例如\n12var example = new ArrayList&lt;String&gt;();example.add(&quot;welcome to hangge.com&quot;);","slug":"Lombok的使用—进阶篇","date":"2022-05-25T15:30:06.000Z","categories_index":"Lombok","tags_index":"Lombok","author_index":"如峰"},{"id":"f4f9a107b18653850d81e048925a42ea","title":"Lombok的使用一中级篇","content":"高级注解解析@Builder是一个帮助类生成复杂的构建器 API。将允许我们使用以下的方式去实例化对象，但是对继承的类的属性会忽略。\n123456Person.builder()   .name(&quot;Adam Savage&quot;)   .city(&quot;San Francisco&quot;)   .job(&quot;Mythbusters&quot;)   .job(&quot;Unchained Reaction&quot;)  .build();\n当你想为某一字段使用默认值时，使用@Builder.Default\n12@Builder.Default private long created = System.currentTimeMillis()\n当某个字段为集合类型时，使用@Singular\n12@Singular private Set&lt;String&gt; occupations;\n例如\n123456789101112import lombok.Builder;import lombok.Singular;import java.util.Set;@Builderpublic class BuilderExample &#123;  @Builder.Default private long created = System.currentTimeMillis();  private String name;  private int age;  @Singular private Set&lt;String&gt; occupations;&#125;\n\n编译后的实体类\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import java.util.Set;public class BuilderExample &#123;  private long created;  private String name;  private int age;  private Set&lt;String&gt; occupations;    BuilderExample(String name, int age, Set&lt;String&gt; occupations) &#123;    this.name = name;    this.age = age;    this.occupations = occupations;  &#125;    private static long $default$created() &#123;    return System.currentTimeMillis();  &#125;    public static BuilderExampleBuilder builder() &#123;    return new BuilderExampleBuilder();  &#125;    public static class BuilderExampleBuilder &#123;    private long created;    private boolean created$set;    private String name;    private int age;    private java.util.ArrayList&lt;String&gt; occupations;        BuilderExampleBuilder() &#123;    &#125;        public BuilderExampleBuilder created(long created) &#123;      this.created = created;      this.created$set = true;      return this;    &#125;        public BuilderExampleBuilder name(String name) &#123;      this.name = name;      return this;    &#125;        public BuilderExampleBuilder age(int age) &#123;      this.age = age;      return this;    &#125;        public BuilderExampleBuilder occupation(String occupation) &#123;      if (this.occupations == null) &#123;        this.occupations = new java.util.ArrayList&lt;String&gt;();      &#125;            this.occupations.add(occupation);      return this;    &#125;        public BuilderExampleBuilder occupations(Collection&lt;? extends String&gt; occupations) &#123;      if (this.occupations == null) &#123;        this.occupations = new java.util.ArrayList&lt;String&gt;();      &#125;      this.occupations.addAll(occupations);      return this;    &#125;        public BuilderExampleBuilder clearOccupations() &#123;      if (this.occupations != null) &#123;        this.occupations.clear();      &#125;            return this;    &#125;    public BuilderExample build() &#123;      // complicated switch statement to produce a compact properly sized immutable set omitted.      Set&lt;String&gt; occupations = ...;      return new BuilderExample(created$set ? created : BuilderExample.$default$created(), name, age, occupations);    &#125;        @java.lang.Override    public String toString() &#123;      return &quot;BuilderExample.BuilderExampleBuilder(created = &quot; + this.created + &quot;, name = &quot; + this.name + &quot;, age = &quot; + this.age + &quot;, occupations = &quot; + this.occupations + &quot;)&quot;;    &#125;  &#125;&#125;\n\n@SneakyThrows(慎用)可以用来偷偷抛出检查异常，而无需在方法的throws子句中实际声明它。\n例如\n12345678910111213import lombok.SneakyThrows;public class SneakyThrowsExample implements Runnable &#123;  @SneakyThrows(UnsupportedEncodingException.class)  public String utf8ToString(byte[] bytes) &#123;    return new String(bytes, &quot;UTF-8&quot;);  &#125;    @SneakyThrows  public void run() &#123;    throw new Throwable();  &#125;&#125;\n\n编译后的实体\n1234567891011121314151617181920import lombok.Lombok;public class SneakyThrowsExample implements Runnable &#123;  public String utf8ToString(byte[] bytes) &#123;    try &#123;      return new String(bytes, &quot;UTF-8&quot;);    &#125; catch (UnsupportedEncodingException e) &#123;      throw Lombok.sneakyThrow(e);    &#125;  &#125;    public void run() &#123;    try &#123;      throw new Throwable();    &#125; catch (Throwable t) &#123;      throw Lombok.sneakyThrow(t);    &#125;  &#125;&#125;\n\n@Synchronized(慎用)此注解是synchronized方法修饰符的一个更安全的变体。就像synchronized，注解只能用于静态和实例方法。它的操作类似于synchronized关键字，但它锁定不同的对象。\n例如\n1234567891011121314151617181920import lombok.Synchronized;public class SynchronizedExample &#123;  private final Object readLock = new Object();    @Synchronized  public static void hello() &#123;    System.out.println(&quot;world&quot;);  &#125;    @Synchronized  public int answerToLife() &#123;    return 42;  &#125;    @Synchronized(&quot;readLock&quot;)  public void foo() &#123;    System.out.println(&quot;bar&quot;);  &#125;&#125;\n\n编译后的实体\n1234567891011121314151617181920212223public class SynchronizedExample &#123;  private static final Object $LOCK = new Object[0];  private final Object $lock = new Object[0];  private final Object readLock = new Object();    public static void hello() &#123;    synchronized($LOCK) &#123;      System.out.println(&quot;world&quot;);    &#125;  &#125;    public int answerToLife() &#123;    synchronized($lock) &#123;      return 42;    &#125;  &#125;    public void foo() &#123;    synchronized(readLock) &#123;      System.out.println(&quot;bar&quot;);    &#125;  &#125;&#125;\n\n@With当你需要克隆对象，修改一个值而保留其他值不变时，则使用此注解。\n例如\n12345678910111213import lombok.AccessLevel;import lombok.NonNull;import lombok.With;public class WithExample &#123;  @With(AccessLevel.PROTECTED) @NonNull private final String name;  @With private final int age;    public WithExample(@NonNull String name, int age) &#123;    this.name = name;    this.age = age;  &#125;&#125;\n\n编译后的实体类\n123456789101112131415161718192021import lombok.NonNull;public class WithExample &#123;  private @NonNull final String name;  private final int age;  public WithExample(String name, int age) &#123;    if (name == null) throw new NullPointerException();    this.name = name;    this.age = age;  &#125;  protected WithExample withName(@NonNull String name) &#123;    if (name == null) throw new java.lang.NullPointerException(&quot;name&quot;);    return this.name == name ? this : new WithExample(name, age);  &#125;  public WithExample withAge(int age) &#123;    return this.age == age ? this : new WithExample(name, age);  &#125;&#125;\n@Getter(lazy&#x3D;true)标注字段为懒加载字段，懒加载字段在创建对象时不会进行初始化，而是在第一次访问的时候才会初始化，后面再次访问也不会重复初始化。\n例如\n12345678910111213import lombok.Getter;public class GetterLazyExample &#123;  @Getter(lazy=true) private final double[] cached = expensive();    private double[] expensive() &#123;    double[] result = new double[1000000];    for (int i = 0; i &lt; result.length; i++) &#123;      result[i] = Math.asin(i);    &#125;    return result;  &#125;&#125;\n\n编译后的实体\n1234567891011121314151617181920212223242526public class GetterLazyExample &#123;  private final java.util.concurrent.AtomicReference&lt;java.lang.Object&gt; cached = new java.util.concurrent.AtomicReference&lt;java.lang.Object&gt;();    public double[] getCached() &#123;    java.lang.Object value = this.cached.get();    if (value == null) &#123;      synchronized(this.cached) &#123;        value = this.cached.get();        if (value == null) &#123;          final double[] actualValue = expensive();          value = actualValue == null ? this.cached : actualValue;          this.cached.set(value);        &#125;      &#125;    &#125;    return (double[])(value == this.cached ? null : value);  &#125;    private double[] expensive() &#123;    double[] result = new double[1000000];    for (int i = 0; i &lt; result.length; i++) &#123;      result[i] = Math.asin(i);    &#125;    return result;  &#125;&#125;\n\n@Cleanup主要用来修饰 IO 流相关类, 会在 finally 代码块中对该资源进行 close();\n例如\n123456789101112131415import lombok.Cleanup;import java.io.*;public class CleanupExample &#123;  public static void main(String[] args) throws IOException &#123;    @Cleanup InputStream in = new FileInputStream(args[0]);    @Cleanup OutputStream out = new FileOutputStream(args[1]);    byte[] b = new byte[10000];    while (true) &#123;      int r = in.read(b);      if (r == -1) break;      out.write(b, 0, r);    &#125;  &#125;&#125;\n\n编译后的实体\n1234567891011121314151617181920212223242526import java.io.*;public class CleanupExample &#123;  public static void main(String[] args) throws IOException &#123;    InputStream in = new FileInputStream(args[0]);    try &#123;      OutputStream out = new FileOutputStream(args[1]);      try &#123;        byte[] b = new byte[10000];        while (true) &#123;          int r = in.read(b);          if (r == -1) break;          out.write(b, 0, r);        &#125;      &#125; finally &#123;        if (out != null) &#123;          out.close();        &#125;      &#125;    &#125; finally &#123;      if (in != null) &#123;        in.close();      &#125;    &#125;  &#125;&#125;\n\n","slug":"Lombok的使用一中级篇","date":"2022-05-19T15:30:06.000Z","categories_index":"Lombok","tags_index":"Lombok","author_index":"如峰"},{"id":"ad1f662ab87a679b9b7a6abe69e2649c","title":"Lombok的使用一基础篇","content":"序言Lombok是一款 Java 开发插件，使得 Java 开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码\n常用注解解析@Data@Data是一个快捷注解，包含@Getter,@Setter,@ToString,@EqualsAndHashCode and @RequiredArgsConstructor注解。当@Data设置于类上时，将自动生成Getter、Setter、ToString、Equals、HashCode方法和默认构造器。\n例如\n123456import lombok.Data;@Datapublic class DataExample &#123;    private String name;&#125;\n编译后的实体类\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class DataExample &#123;    public String name;    public DataExample() &#123;    &#125;    public String getName() &#123;        return this.name;    &#125;    public void setName(final String name) &#123;        this.name = name;    &#125;    public boolean equals(final Object o) &#123;        if (o == this) &#123;            return true;        &#125; else if (!(o instanceof DataExample)) &#123;            return false;        &#125; else &#123;            DataExample other = (DataExample)o;            if (!other.canEqual(this)) &#123;                return false;            &#125; else &#123;                Object this$name = this.getName();                Object other$name = other.getName();                if (this$name == null) &#123;                    if (other$name != null) &#123;                        return false;                    &#125;                &#125; else if (!this$name.equals(other$name)) &#123;                    return false;                &#125;                return true;            &#125;        &#125;    &#125;    protected boolean canEqual(final Object other) &#123;        return other instanceof DataExample;    &#125;    public int hashCode() &#123;        int PRIME = true;        int result = 1;        Object $name = this.getName();        int result = result * 59 + ($name == null ? 43 : $name.hashCode());        return result;    &#125;    public String toString() &#123;        return &quot;DataExample(name=&quot; + this.getName() + &quot;)&quot;;    &#125;&#125;\n@Getter and @Setter当为某一字段设置@Getter、@Setter注解时将自动生成此字段的Getter、Setter方法。当为某实体类设置@Getter、@Setter注解时，相当于为类中所有非静态字段设置@Getter、@Setter注解。\n例如\n12345678import lombok.Getter;import lombok.Setter;@Getter@Setterpublic class GetterSetterExample &#123;    private int age ;&#125;\n编译后的实体类\n\t\n123456789public class GetterSetterExample &#123;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;&#125;\n@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor构造器注解@NoArgsConstructor 将生成一个没有参数的构造函数，如果有final字段需使用@NoArgsConstructor(force = true)初始化@AllArgsConstructor 为类中的每个字段生成一个带有 1 个参数的构造函数。标注@NonNull参数会进行空检查。@RequiredArgsConstructor 生成构造包含所有必须字段的参数，包括含@NotNull注解的字段并做空检查，和final修饰且未初始化的字段。\n例如\n\t\n1234567891011121314151617import lombok.AccessLevel;import lombok.RequiredArgsConstructor;import lombok.AllArgsConstructor;import lombok.NonNull;@RequiredArgsConstructor(staticName = &quot;of&quot;)@AllArgsConstructor(access = AccessLevel.PROTECTED)public class ConstructorExample&lt;T&gt; &#123;  private int x, y;  @NonNull private T description;    @NoArgsConstructor  public static class NoArgsExample &#123;    @NonNull private String field;  &#125;&#125;\n编译后的实体类\n\t\n12345678910111213141516171819202122232425262728public class ConstructorExample&lt;T&gt; &#123;  private int x, y;  @NonNull private T description;    private ConstructorExample(T description) &#123;    if (description == null) throw new NullPointerException(&quot;description&quot;);    this.description = description;  &#125;    public static &lt;T&gt; ConstructorExample&lt;T&gt; of(T description) &#123;    return new ConstructorExample&lt;T&gt;(description);  &#125;    @java.beans.ConstructorProperties(&#123;&quot;x&quot;, &quot;y&quot;, &quot;description&quot;&#125;)  protected ConstructorExample(int x, int y, T description) &#123;    if (description == null) throw new NullPointerException(&quot;description&quot;);    this.x = x;    this.y = y;    this.description = description;  &#125;    public static class NoArgsExample &#123;    @NonNull private String field;        public NoArgsExample() &#123;    &#125;  &#125;&#125;\n@EqualsAndHashCode任何类定义都可以用注释@EqualsAndHashCode来让Lombok生成equals(Object other)和hashCode()方法的实现。\n例如\n\t\n12345678910111213141516171819202122232425import lombok.EqualsAndHashCode;@EqualsAndHashCodepublic class EqualsAndHashCodeExample &#123;  private transient int transientVar = 10;  private String name;  private double score;  @EqualsAndHashCode.Exclude private Shape shape = new Square(5, 10);  private String[] tags;  @EqualsAndHashCode.Exclude private int id;    public String getName() &#123;    return this.name;  &#125;    @EqualsAndHashCode(callSuper=true)  public static class Square extends Shape &#123;    private final int width, height;        public Square(int width, int height) &#123;      this.width = width;      this.height = height;    &#125;  &#125;&#125;\n编译后的实体类\n\t\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import java.util.Arrays;public class EqualsAndHashCodeExample &#123;  private transient int transientVar = 10;  private String name;  private double score;  private Shape shape = new Square(5, 10);  private String[] tags;  private int id;    public String getName() &#123;    return this.name;  &#125;    @Override public boolean equals(Object o) &#123;    if (o == this) return true;    if (!(o instanceof EqualsAndHashCodeExample)) return false;    EqualsAndHashCodeExample other = (EqualsAndHashCodeExample) o;    if (!other.canEqual((Object)this)) return false;    if (this.getName() == null ? other.getName() != null : !this.getName().equals(other.getName())) return false;    if (Double.compare(this.score, other.score) != 0) return false;    if (!Arrays.deepEquals(this.tags, other.tags)) return false;    return true;  &#125;    @Override public int hashCode() &#123;    final int PRIME = 59;    int result = 1;    final long temp1 = Double.doubleToLongBits(this.score);    result = (result*PRIME) + (this.name == null ? 43 : this.name.hashCode());    result = (result*PRIME) + (int)(temp1 ^ (temp1 &gt;&gt;&gt; 32));    result = (result*PRIME) + Arrays.deepHashCode(this.tags);    return result;  &#125;    protected boolean canEqual(Object other) &#123;    return other instanceof EqualsAndHashCodeExample;  &#125;    public static class Square extends Shape &#123;    private final int width, height;        public Square(int width, int height) &#123;      this.width = width;      this.height = height;    &#125;        @Override public boolean equals(Object o) &#123;      if (o == this) return true;      if (!(o instanceof Square)) return false;      Square other = (Square) o;      if (!other.canEqual((Object)this)) return false;      if (!super.equals(o)) return false;      if (this.width != other.width) return false;      if (this.height != other.height) return false;      return true;    &#125;        @Override public int hashCode() &#123;      final int PRIME = 59;      int result = 1;      result = (result*PRIME) + super.hashCode();      result = (result*PRIME) + this.width;      result = (result*PRIME) + this.height;      return result;    &#125;        protected boolean canEqual(Object other) &#123;      return other instanceof Square;    &#125;  &#125;&#125;\n@NonNull您可以@NonNull在字段、方法、构造函数的参数上使用。这将导致Lombok为您生成一个空检查语句。\n例如\n12345678910import lombok.NonNull;public class NonNullExample extends Something &#123;  private String name;    public NonNullExample(@NonNull Person person) &#123;    super(&quot;Hello&quot;);    this.name = person.getName();  &#125;&#125;\n编译后的实体类\n\t\n12345678910111213import lombok.NonNull;public class NonNullExample extends Something &#123;  private String name;    public NonNullExample(@NonNull Person person) &#123;    super(&quot;Hello&quot;);    if (person == null) &#123;      throw new NullPointerException(&quot;person is marked non-null but is null&quot;);    &#125;    this.name = person.getName();  &#125;&#125;\n\n@LogLombok里关于@Log添加了多种变体，无论使用哪个，都将生成一个静态的final log字段，按照你使用的日志框架的通常规定的方式进行初始化，然后你可以使用它来编写日志语句。变体有@CommonsLog、@Flogger、@JBossLog、@Log、@Log4j、@Log4j2、@Slf4j、@XSlf4j、@CustomLog。\n例如\n1234567891011121314151617181920212223242526import lombok.extern.java.Log;import lombok.extern.slf4j.Slf4j;@Logpublic class LogExample &#123;    public static void main(String... args) &#123;    log.severe(&quot;Something&#x27;s wrong here&quot;);  &#125;&#125;@Slf4jpublic class LogExampleOther &#123;    public static void main(String... args) &#123;    log.error(&quot;Something else is wrong here&quot;);  &#125;&#125;@CommonsLog(topic=&quot;CounterLog&quot;)public class LogExampleCategory &#123;  public static void main(String... args) &#123;    log.error(&quot;Calling the &#x27;CounterLog&#x27; with a message&quot;);  &#125;&#125;\n编译后的实体类\n1234567891011121314151617181920212223public class LogExample &#123;  private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName());    public static void main(String... args) &#123;    log.severe(&quot;Something&#x27;s wrong here&quot;);  &#125;&#125;public class LogExampleOther &#123;  private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExampleOther.class);    public static void main(String... args) &#123;    log.error(&quot;Something else is wrong here&quot;);  &#125;&#125;public class LogExampleCategory &#123;  private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(&quot;CounterLog&quot;);  public static void main(String... args) &#123;    log.error(&quot;Calling the &#x27;CounterLog&#x27; with a message&quot;);  &#125;&#125;\n","slug":"Lombok的使用一基础篇","date":"2022-05-19T15:30:06.000Z","categories_index":"Lombok","tags_index":"Lombok","author_index":"如峰"},{"id":"91e0f6f330b5dca608acfed732198bf6","title":"JavaScript代码技巧","content":"变量的声明var、const、let的区别\n\n\n表头\nvar\nlet\nconst\n\n\n\n定义常量\n\n\n√\n\n\n定义变量\n√\n√\n\n\n\n可被释放\n√\n√\n√\n\n\n可被提升\n√\n\n\n\n\n重复定义检查\n\n√\n√\n\n\n可用于块级作用域\n\n√\n√\n\n\n多行变量声明的优化12345678910111213141516171819202122232425262728let name = 1;  // 名称let age = 2;   // 年龄let classes = 3; // 班级// 优化后// 名称 年龄 班级let [name, age, classes] = [1, 2, 3];// 特别多的变量,当需要换行时的格式let [name, age, classes]    = [1, 2, 3];// 此方式默认值的设置,myClasses默认值设置3let [name, age, myClasses]    = [1, 2, class || 3];// 声明三个都是undefined的变量let [name, age, myClasses] = [];// 声明三个都是空的变量 let [name, age, myClasses] = new Array(4).join().split(&#x27;,&#x27;) || null;// 声明三个都是0的变量let [name, age, myClasses] = new Array(4).join(&#x27;0&#x27;).split(&#x27;&#x27;);// 声明三个都是0的变量let [name, age, myClasses] = new Array(3).fill(0);let [name, age, myClasses] = Array.from(&#123;length: 3&#125;).map(()=&gt; 0)\n\n数组取值的优化123456789let arr = [1, 2, 3];let arr1 = arr[0];let arr2 = arr[1];let arr3 = arr[2];// 优化后let arr = [1, 2, 3];let [arr1, arr2, arr3] = arr;\n对象取值的优化1234567891011121314let student = &#123;name:1, age:2, classes:3&#125;;let name = student.name;   // 名称let age = student.age;     // 年龄let classes = student.classes; // 班级// 优化后let &#123;name : name, age : age, classes : classes&#125; = student;// 变量与属性名不相同 (key : value) key:JSON对象的属性名 value:变量名let &#123;name : myName, age : myAge, classes : myClasses&#125; = student;// 此种对象的默认值设置仅在等于undefined的时候触发Myclasses = 0let &#123;name : myName, age : myAge, classes : myClasses = 0&#125; = student; let &#123;name , age , classes&#125; = student;\n\n逻辑与 &amp;&amp; 、逻辑或 || 的使用在使用之前我们要理解逻辑与和逻辑或的重要特性,短路.逻辑与: 当前面为假时,则直接返回假,否则返回后面的结果逻辑或: 当前面为真时,则直接返回真,否则返回后面的结果\n默认值的优化1234567891011121314// myName默认值的优化let name = 1;if (name) &#123;    let myName = name;&#125; else &#123;    let myName = 2;&#125;// 优化后let name = 1;let myName = name || 2;// 扩展:我们在函数调用时设置默认值getName(myName || name);\n\n单行if语句的优化123456// 单行if语句的优化if(name)&#123; console.log(name)&#125;// 优化后name &amp;&amp; console.log(name);\n\n取非空对象值的优化12345678910111213141516171819// 取非空JSON值的优化let student = null;let student1 = &#123;name : 1&#125;;// student与student在代码逻辑中,只有一个有值,且我们要取出这个name,优先取studentlet name = null;if (student) &#123;    name = student.name;&#125; else if(student1) &#123;    name = student1.name;&#125;// 优化后let student = null;let student1 = &#123;name : 1&#125;;let name = (student || student1)[&#x27;name&#x27;];// 或者let name = (student || student1).name;\n\nJSON的使用JSON声明的优化123456789101112let student = &#123;&#125;;let classes = 2;student.name = 1;student.classes = classes || 3;// 优化后let classes = 2;let student = &#123;    name : 1,    classes : classes || 3,&#125;;\n\nJSON取值的优化1234567891011121314151617let student = &#123;    name : 1,    classes1 : null,    classes2 : 3,&#125;;// 当classes1为空时取classes2let classes = null;if (student.classes1) &#123;    classes = student.classes1;&#125; else &#123;    classes = student.classes2;&#125;// 优化后let classes = student.classes1 || student.classes2;let classes = student[&quot;classes1&quot;] || student[&#x27;classes2&quot;];\n\n条件运算符的使用if else 语句的优化123456789101112let method = request.method;if (method == &#x27;GET&#x27;) &#123;    let name = request.getValue(&quot;name&quot;);&#125; else &#123;    let name = request.getValue(&quot;custpage_name&quot;);&#125;// 优化后let method = request.method;let name = request.getValue(method == &#x27;GET&#x27; ? &quot;name&quot; : &quot;custpage_name&quot;);let name = method == &#x27;GET&#x27; ? request.getValue(&quot;name&quot;) : request.getValue(&quot;custpage_name&quot;);\n\n方法调用的优化1234567891011121314let isUp = false;if (isUp)&#123;    up();&#125; else &#123;    down();&#125;// 优化后let isUp = false;isUp ? up() : down();// 或者在函数的返回值使用条件运算符function jump(isUp)&#123;    return isUp ? up() : down();&#125;\n\n其它链式调用12345678910111213141516171819202122232425262728293031var form = serverWidget.createForm(&#123;\t\ttitle: &#x27;Thank you for your interest in Wolfe Electronics&#x27;,\t\thideNavBar: true\t&#125;);var htmlHeader = form.addField(&#123;\t\tid: &#x27;custpage_header&#x27;,\t\ttype: serverWidget.FieldType.INLINEHTML,\t\tlabel: &#x27; &#x27;\t&#125;);htmlHeader.updateLayoutType(&#123;\t\tlayoutType: serverWidget.FieldLayoutType.OUTSIDEABOVE\t&#125;);htmlHeader.updateBreakType(&#123;\t\tbreakType: serverWidget.FieldBreakType.STARTROW\t&#125;);htmlHeader.defaultValue = &#x27;&lt;p style=\\&#x27;font-size:20px\\&#x27;&gt;We pride ourselves on providing the best&#x27; + &#x27; services and customer satisfaction. Please take a moment to fill out our survey.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&#x27;;// 链式调用var form = serverWidget.createForm(&#123;\t\ttitle: &#x27;Thank you for your interest in Wolfe Electronics&#x27;,\t\thideNavBar: true\t&#125;);var htmlHeader = form.addField(&#123;\t\tid: &#x27;custpage_header&#x27;,\t\ttype: serverWidget.FieldType.INLINEHTML,\t\tlabel: &#x27; &#x27;\t&#125;).updateLayoutType(&#123;\t\tlayoutType: serverWidget.FieldLayoutType.OUTSIDEABOVE\t&#125;).updateBreakType(&#123;\t\tbreakType: serverWidget.FieldBreakType.STARTROW\t&#125;).defaultValue = &#x27;&lt;p style=\\&#x27;font-size:20px\\&#x27;&gt;We pride ourselves on providing the best&#x27; + &#x27; services and customer satisfaction. Please take a moment to fill out our survey.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&#x27;;\n\n字符串拼接12345678910111213141516171819let n = &#x27;1&#x27;;let b = &#x27;2&#x27;;let s = &#x27;3&#x27;;let y = &#x27;4&#x27;;let string = n + &quot;-&quot; + b + &quot;-&quot; + s + &quot;-&quot; + y;let string2 = n + b + s + y;// 优化后let n = &#x27;1&#x27;;let b = &#x27;2&#x27;;let s = &#x27;3&#x27;;let y = &#x27;4&#x27;;let string = [n, b ,s,y].join(&quot;-&quot;);let string2 = n.concat(b, s, y);// 字符串拼接其他方式let string = &quot;a-b-c-y&quot;;string = string.replace(&quot;a&quot;,a).replace(&quot;b&quot;,b).replace(&quot;b&quot;,b).replace(&quot;y&quot;,y);\n\n包含判断12345678910let a = 1;if(a == 1 || a == 2 || a == 3)&#123;     // doSomething&#125;    // 优化if([1, 2, 3].indexof(a) &gt;= 0)&#123;     // doSomething&#125;\n\n数组的简写方式1234let a = new Array();// 简写let a = [];\n\n箭头函数箭头函数就是函数的简写方式\n12345678910111213function doSomething(a, b)&#123;    return a + b;&#125;// 以下仅仅@NApiVersion 2.0以上可以使用// 简写let doSomething = (a, b) =&gt; &#123;return a + b;&#125;;// 箭头函数的两个省略// 1.当箭头左边只有一个参数时,可省略()a =&gt; &#123;return a + 1;&#125;;// 2.当箭头右边只有一句话时,可省略&#123;&#125;与return(a, b) =&gt; a + b;\n\n对象的keys、values的使用1234567891011121314let student = &#123;    name : 1,    classes : 3,&#125;;// 获取对象的KeysObject.keys(student);   // expected output: [&quot;name&quot;, &quot;classes&quot;]// 获取对象的valuesObject.values(student); // expected output: [1, 3]// 判断对象是否具有该属性student.hasOwnProperty(&quot;classes&quot;);Object.keys(student).indexof(&quot;name&quot;) &gt;= 0;\n\n数组的常用函数12345678910111213141516171819202122232425262728293031323334 // filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 const words = [&#x27;spray&#x27;, &#x27;limit&#x27;, &#x27;elite&#x27;, &#x27;exuberant&#x27;, &#x27;destruction&#x27;, &#x27;present&#x27;];const result = words.filter(word =&gt; word.length &gt; 6);console.log(result);             // expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]// find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。const array1 = [5, 12, 8, 130, 44];const found = array1.find(element =&gt; element &gt; 10);console.log(found);              // expected output: 12// forEach() 方法对数组的每个元素执行一次给定的函数。const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];array1.forEach(element =&gt; console.log(element));// includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。const array1 = [1, 2, 3];console.log(array1.includes(2));   // expected output: trueconst pets = [&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;bat&#x27;];console.log(pets.includes(&#x27;cat&#x27;)); // expected output: trueconsole.log(pets.includes(&#x27;at&#x27;));  // expected output: false// map() 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。const array1 = [1, 4, 9, 16];     // pass a function to mapconst map1 = array1.map(x =&gt; x * 2);console.log(map1);                // expected output: Array [2, 8, 18, 32]// reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。const array1 = [1, 2, 3, 4];const reducer = (accumulator, currentValue) =&gt; accumulator + currentValue; // 1 + 2 + 3 + 4console.log(array1.reduce(reducer));                                       // expected output: 10// 5 + 1 + 2 + 3 + 4console.log(array1.reduce(reducer, 5));                                    // expected output: 15\n这些方法是ES6以上可以使用,但是我们想在ES6以下运用这些方法时,只需按照网址:https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Array找到对应函数polyfill复制粘贴就能使用.\n字符串常用方法123456789101112// padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。&#x27;abc&#x27;.padEnd(10);          // &quot;abc       &quot;&#x27;abc&#x27;.padEnd(10, &quot;foo&quot;);   // &quot;abcfoofoof&quot;&#x27;abc&#x27;.padEnd(6, &quot;123456&quot;); // &quot;abc123&quot;&#x27;abc&#x27;.padEnd(1);           // &quot;abc&quot;// padStart() 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。&#x27;abc&#x27;.padStart(10);         // &quot;       abc&quot;&#x27;abc&#x27;.padStart(10, &quot;foo&quot;);  // &quot;foofoofabc&quot;&#x27;abc&#x27;.padStart(6,&quot;123465&quot;); // &quot;123abc&quot;&#x27;abc&#x27;.padStart(8, &quot;0&quot;);     // &quot;00000abc&quot;&#x27;abc&#x27;.padStart(1);          // &quot;abc&quot;\n这些方法注意事项同上.\n优化的注意事项在优化之前我们要理解为什么要优化代码,所有的优化都是为了代码的可读性,但在某些情况下以上的例子不优化可能比优化的可读性要好例如 \n1234567// 声明三个都是空的变量 let name = null;    // 名称let age = null;     // 年龄let classes = null; // 班级// 优化后let [name, age, myClasses] = new Array(4).join().split(&#x27;,&#x27;) || null;\n\n难道上面name, age, classes的声明方式比下面的优化语句,可读性差吗?并没有,但是当声明10个、20个、30个以上空的变量时,下面的优化语句就比上面的可读性强.当我们发现优化后并没有对可读性有提升时,就没必要优化.不过我们依然需要了解这些优化方式,以免我们需要增加代码可读性的时候,无从下手,或者不理解别人的代码.可读性不强的代码千千万万,优化的方式也多种多样,我们应当不放过自己可读性不强的代码,记住别人好的优化方式.各位还有别的案例或者优化方式,都可以自己更新这个文档,分享出来.\n网址的分享Javascript教程:https://wangdoc.com/javascript/index.htmlJS编程规范:https://github.com/airbnb/javascript/tree/es5-deprecated/es5ECMAScript6入门:https://es6.ruanyifeng.com/?search=%E7%AE%AD%E5%A4%B4&amp;x=0&amp;y=0JavaScript帮助文档:https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_ObjectswebStorm激活码获取:http://idea.94goo.com/\n","slug":"JavaScript代码技巧","date":"2022-05-16T15:05:06.000Z","categories_index":"前端","tags_index":"JavaScript","author_index":"如峰"}]