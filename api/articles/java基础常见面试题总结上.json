{"title":"java基础常见面试题总结","uid":"b47dcd39598a93d4c21d7c5ce2d6464a","slug":"java基础常见面试题总结上","date":"2021-03-13T01:09:41.000Z","updated":"2025-03-13T07:54:00.654Z","comments":true,"path":"api/articles/java基础常见面试题总结上.json","keywords":null,"cover":null,"content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"Java语言有哪些特点\"><a href=\"#Java语言有哪些特点\" class=\"headerlink\" title=\"Java语言有哪些特点\"></a>Java语言有哪些特点</h3><ol>\n<li>简单易学</li>\n<li>面向对象</li>\n<li>平台无关性（一次编写，随处运行）</li>\n<li>支持多线程</li>\n<li>可靠性</li>\n<li>安全性</li>\n</ol>\n<h3 id=\"JVM-vs-JDK-vs-JRE\"><a href=\"#JVM-vs-JDK-vs-JRE\" class=\"headerlink\" title=\"JVM vs JDK vs JRE\"></a>JVM vs JDK vs JRE</h3><p><code>JVM</code> ：<code>Java</code> 虚拟机（<code>Java Virtual Machine, JVM</code>）是运行 <code>Java</code> 字节码的虚拟机。<br><code>JDK</code> ：<code>JDK</code>（<code>Java Development Kit</code>）是一个功能齐全的 <code>Java</code> 开发工具包，供开发者使用，用于创建和编译 <code>Java</code> 程序。它包含了 <code>JRE</code>（<code>Java Runtime Environment</code>），以及编译器 <code>javac</code> 和其他工具，如 <code>javadoc</code>（文档生成器）、<code>jdb</code>（调试器）、<code>jconsole</code>（监控工具）、<code>javap</code>（反编译工具）等。—<br><code>JRE</code>：<code>JRE</code> 是运行已编译 <code>Java</code> 程序所需的环境，主要包含以下两个部分：</p>\n<ol>\n<li><strong>JVM</strong> : 也就是我们上面提到的 <code>Java</code> 虚拟机。</li>\n<li><strong>Java 基础类库（Class Library）</strong> ：一组标准的类库，提供常用的功能和 <code>API</code>（如 <code>I/O</code> 操作、网络通信、数据结构等）。</li>\n</ol>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"注释有哪几种形式？\"><a href=\"#注释有哪几种形式？\" class=\"headerlink\" title=\"注释有哪几种形式？\"></a>注释有哪几种形式？</h3><p>Java 中的注释有三种：</p>\n<ol>\n<li><strong>单行注释</strong> ：通常用于解释方法内某单行代码的作用。</li>\n<li><strong>多行注释</strong> ：通常用于解释一段代码的作用。</li>\n<li><strong>文档注释</strong> ：通常用于生成 <code>Java</code> 开发文档。</li>\n</ol>\n<h3 id=\"标识符和关键字有什么区别？\"><a href=\"#标识符和关键字有什么区别？\" class=\"headerlink\" title=\"标识符和关键字有什么区别？\"></a>标识符和关键字有什么区别？</h3><p><strong>标识符</strong>：在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 标识符 。<em>简单来说， 标识符就是一个名字</em> 。<br><strong>关键字</strong>：有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 关键字 。<em>简单来说，关键字是被赋予特殊含义的标识符</em> 。</p>\n<h3 id=\"Java语言有哪些关键字\"><a href=\"#Java语言有哪些关键字\" class=\"headerlink\" title=\"Java语言有哪些关键字?\"></a>Java语言有哪些关键字?</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>访问控制</td>\n<td><code>private、protected、public</code></td>\n</tr>\n<tr>\n<td>类、方法和变量修饰符</td>\n<td><code>abstract、class、extends、final、implements、interface、native、new、static、strictfp、synchronized、transient、volatile、enum</code></td>\n</tr>\n<tr>\n<td>程序控制</td>\n<td><code>break、continue、return、do、while、if、else、for、instanceof、switch、case、default、assert</code></td>\n</tr>\n<tr>\n<td>错误处理</td>\n<td><code>try、catch、throw、throws、finally</code></td>\n</tr>\n<tr>\n<td>包相关</td>\n<td><code>import、package</code></td>\n</tr>\n<tr>\n<td>基本类型</td>\n<td><code>boolean、byte、char、double、float、int、long、short</code></td>\n</tr>\n<tr>\n<td>变量引用</td>\n<td><code>super、this、void</code></td>\n</tr>\n<tr>\n<td>保留字</td>\n<td><code>goto、const</code></td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。</p>\n<p><code>default</code> 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。在程序控制中，当在 <code>switch</code> 中匹配不到任何情况时，可以使用 <code>default</code> 来编写默认匹配的情况。在类，方法和变量修饰符中，从 <code>JDK8</code> 开始引入了默认方法，可以使用 <code>default</code> 关键字来定义一个方法的默认实现。在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 <code>default</code>，但是这个修饰符加上了就会报错。</p>\n\n</div>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>虽然 <code>true</code>, <code>false</code>, 和 <code>null</code> 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。</p>\n</p>\n</div>\n<h3 id=\"continue、break-和-return-的区别是什么？\"><a href=\"#continue、break-和-return-的区别是什么？\" class=\"headerlink\" title=\"continue、break 和 return 的区别是什么？\"></a>continue、break 和 return 的区别是什么？</h3><p><code>continue</code>：指跳出当前的这一次循环，继续下一次循环。<br><code>break</code>：指跳出整个循环体，继续执行循环下面的语句。<br><code>return</code>：用于跳出所在方法，结束该方法的运行。<code>return</code> 一般有两种用法：</p>\n<ol>\n<li><code>return;</code>：直接使用 <code>return</code> 结束方法执行，用于没有返回值函数的方法</li>\n<li><code>return value;</code>：<code>return</code> 一个特定值，用于有返回值函数的方法</li>\n</ol>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"Java-中的几种基本数据类型了解么？\"><a href=\"#Java-中的几种基本数据类型了解么？\" class=\"headerlink\" title=\"Java 中的几种基本数据类型了解么？\"></a>Java 中的几种基本数据类型了解么？</h3><p>Java 中有 8 种基本数据类型，分别为：</p>\n<ol>\n<li>6种数字类型：<br>   4种整数型：<code>byte、short、int、long</code><br>   2种浮点型：<code>float、double</code></li>\n<li>1种字符类型：<code>char</code></li>\n<li>1种布尔型：<code>boolean</code></li>\n</ol>\n<h4 id=\"基本类型和包装类型的区别？\"><a href=\"#基本类型和包装类型的区别？\" class=\"headerlink\" title=\"基本类型和包装类型的区别？\"></a>基本类型和包装类型的区别？</h4><ol>\n<li>定义与用途：<br><strong>基本类型</strong>：Java中的基本数据类型，包括<code>int, float, double, boolean</code>等，用于存储简单的数据。<br><strong>包装类型</strong>：基本类型的封装类，如<code>Integer, Float, Double, Boolean</code>等，提供了更多方法和功能，用于处理复杂的数据操作。</li>\n<li>存储方式<br><strong>基本类型</strong>：直接存储值，内存占用较小。<br><strong>包装类型</strong>：作为对象存储，除了存储值外，还包含方法和属性，内存占用较大。</li>\n<li>默认值<br><strong>基本类型</strong>：不能存储<code>null</code>值。<br><strong>包装类型</strong>：可以存储<code>null</code>值，表示没有值。</li>\n<li>比较方式：<br><strong>基本类型</strong>：&#x3D;&#x3D;<br><strong>包装类型</strong>：&#x3D;&#x3D; 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</li>\n</ol>\n<h3 id=\"自动装箱与拆箱了解吗？原理是什么？\"><a href=\"#自动装箱与拆箱了解吗？原理是什么？\" class=\"headerlink\" title=\"自动装箱与拆箱了解吗？原理是什么？\"></a>自动装箱与拆箱了解吗？原理是什么？</h3><p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；<br><strong>拆箱</strong>：将包装类型转换为基本数据类型；</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</p>\n\n</div>\n<h3 id=\"超过-long-整型的数据应该如何表示？\"><a href=\"#超过-long-整型的数据应该如何表示？\" class=\"headerlink\" title=\"超过 long 整型的数据应该如何表示？\"></a>超过 long 整型的数据应该如何表示？</h3><p>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。<br>在 <code>Java</code> 中，64 位 <code>long</code> 整型是最大的整数类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long l = Long.MAX_VALUE;</span><br><span class=\"line\">System.out.println(l + 1); // -9223372036854775808</span><br><span class=\"line\">System.out.println(l + 1 == Long.MIN_VALUE); // true</span><br></pre></td></tr></table></figure>\n\n<p><code>BigInteger</code> 内部使用 <code>int[]</code> 数组来存储任意大小的整形数据。<br>相对于常规整数类型的运算来说，<code>BigInteger</code> 运算的效率会相对较低。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"成员变量与局部变量的区别？\"><a href=\"#成员变量与局部变量的区别？\" class=\"headerlink\" title=\"成员变量与局部变量的区别？\"></a>成员变量与局部变量的区别？</h3><ol>\n<li>语法形式<br><strong>成员变量</strong>：成员变量是属于类的，可以被 <code>public,private,static</code> 等修饰符所修饰，都能被<code>final</code>修饰<br><strong>局部变量</strong>：局部变量是在代码块或方法中定义的变量或是方法的参数，而局部变量不能被访问控制修饰符及 <code>static</code> 所修饰，都能被<code>final</code>修饰</li>\n<li>存储方式<br><strong>成员变量</strong>：如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。存储在堆内存中。<br><strong>局部变量</strong>：局部变量则存在于栈内存。</li>\n<li>生存时间<br><strong>成员变量</strong>：随着对象的创建而创建，随着对象的销毁而销毁。<br><strong>局部变量</strong>：随着方法的调用而创建，随着方法的结束而销毁。</li>\n<li>默认值<br><strong>成员变量</strong>：成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 <code>final</code> 修饰的成员变量也必须显式地赋值）<br><strong>局部变量</strong>：局部变量则不会自动赋值</li>\n</ol>\n<h3 id=\"静态变量有什么作用？\"><a href=\"#静态变量有什么作用？\" class=\"headerlink\" title=\"静态变量有什么作用？\"></a>静态变量有什么作用？</h3><p>静态变量也就是被 <code>static</code> 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。<br>静态变量是通过类名来访问的，例如<code>StaticVariableExample.staticVar</code>（如果被 <code>private</code>关键字修饰就无法这样访问了）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StaticVariableExample &#123;</span><br><span class=\"line\">    // 静态变量</span><br><span class=\"line\">    public static int staticVar = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，静态变量会被 <code>final</code> 关键字修饰成为常量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ConstantVariableExample &#123;</span><br><span class=\"line\">    // 常量</span><br><span class=\"line\">    public static final int constantVar = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符型常量和字符串常量的区别\"><a href=\"#字符型常量和字符串常量的区别\" class=\"headerlink\" title=\"字符型常量和字符串常量的区别?\"></a>字符型常量和字符串常量的区别?</h3><ol>\n<li>形式 :<br><strong>字符型常量</strong>：字符常量是单引号引起的一个字符<br><strong>字符串常量</strong>：字符串常量是双引号引起的 0 个或若干个字符</li>\n<li>含义<br><strong>字符型常量</strong>：字符常量相当于一个整型值( <code>ASCII</code> 值),可以参加表达式运算<br><strong>字符串常量</strong>：字符串常量代表一个地址值(该字符串在内存中存放位置)。</li>\n<li>内存大小<br><strong>字符型常量</strong>：只占 2 个字节<br><strong>字符串常量</strong>：占若干个字节。</li>\n</ol>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"什么是方法的返回值-方法有哪几种类型？\"><a href=\"#什么是方法的返回值-方法有哪几种类型？\" class=\"headerlink\" title=\"什么是方法的返回值?方法有哪几种类型？\"></a>什么是方法的返回值?方法有哪几种类型？</h3><p>方法的返回值：是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！<br>方法的类型：</p>\n<ol>\n<li>无参数无返回值的方法</li>\n<li>有参数无返回值的方法</li>\n<li>有返回值无参数的方法</li>\n<li>有返回值有参数的方法</li>\n</ol>\n<h3 id=\"静态方法为什么不能调用非静态成员\"><a href=\"#静态方法为什么不能调用非静态成员\" class=\"headerlink\" title=\"静态方法为什么不能调用非静态成员?\"></a>静态方法为什么不能调用非静态成员?</h3><p>这个需要结合 <code>JVM</code> 的相关知识，主要原因如下：</p>\n<ol>\n<li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</li>\n<li>在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li>\n</ol>\n<h3 id=\"静态方法和实例方法有何不同？\"><a href=\"#静态方法和实例方法有何不同？\" class=\"headerlink\" title=\"静态方法和实例方法有何不同？\"></a>静态方法和实例方法有何不同？</h3><ol>\n<li>调用方式<br><strong>静态方法</strong>：使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式。调用静态方法可以无需创建对象 。<br><strong>实例方法</strong>：使用 对象.方法名</li>\n<li>访问类成员是否存在限制<br><strong>静态方法</strong>：只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法）<br><strong>实例方法</strong>：实例方法不存在限制</li>\n</ol>\n<h3 id=\"重载和重写有什么区别？\"><a href=\"#重载和重写有什么区别？\" class=\"headerlink\" title=\"重载和重写有什么区别？\"></a>重载和重写有什么区别？</h3><p><strong>重载</strong>： 发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。<br><strong>重写</strong>： 重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p>\n<ol>\n<li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li>\n<li>如果父类方法访问修饰符为 <code>private/final/static</code> 则子类就不能重写该方法，但是被 <code>static</code> 修饰的方法能够被再次声明。</li>\n<li>构造方法无法被重写</li>\n</ol>\n<h3 id=\"什么是可变长参数？\"><a href=\"#什么是可变长参数？\" class=\"headerlink\" title=\"什么是可变长参数？\"></a>什么是可变长参数？</h3><p>从 <code>Java5</code> 开始，<code>Java</code> 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面这个方法就可以接受 0 个或者多个参数。另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void method1(String... args) &#123;</span><br><span class=\"line\">   //......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？<br>答案是会优先匹配固定参数的方法，因为固定参数的方法匹配度更高。</p>\n","text":"基础Java语言有哪些特点 简单易学 面向对象 平台无关性（一次编写，随处运行） 支持多线程 可靠性 安全性 JVM vs JDK vs JREJVM ：Jav...","permalink":"/post/java基础常见面试题总结上","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E8%AF%AD%E8%A8%80%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">Java语言有哪些特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JVM-vs-JDK-vs-JRE\"><span class=\"toc-text\">JVM vs JDK vs JRE</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">注释有哪几种形式？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">标识符和关键字有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E8%AF%AD%E8%A8%80%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">Java语言有哪些关键字?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#continue%E3%80%81break-%E5%92%8C-return-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">continue、break 和 return 的区别是什么？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BA%86%E8%A7%A3%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">Java 中的几种基本数据类型了解么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">基本类型和包装类型的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1%E4%BA%86%E8%A7%A3%E5%90%97%EF%BC%9F%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">自动装箱与拆箱了解吗？原理是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B6%85%E8%BF%87-long-%E6%95%B4%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%EF%BC%9F\"><span class=\"toc-text\">超过 long 整型的数据应该如何表示？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">成员变量与局部变量的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">静态变量有什么作用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%B8%B8%E9%87%8F%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">字符型常量和字符串常量的区别?</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC-%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">什么是方法的返回值?方法有哪几种类型？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E8%B0%83%E7%94%A8%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">静态方法为什么不能调用非静态成员?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">静态方法和实例方法有何不同？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">重载和重写有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%EF%BC%9F\"><span class=\"toc-text\">什么是可变长参数？</span></a></li></ol></li></ol>","author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JavaScript代码技巧","uid":"91e0f6f330b5dca608acfed732198bf6","slug":"JavaScript代码技巧","date":"2022-05-16T15:05:06.000Z","updated":"2025-03-11T03:18:35.967Z","comments":true,"path":"api/articles/JavaScript代码技巧.json","keywords":null,"cover":"/logo/97b97ee1173042d5ba667df7ecbe43f6.png","text":"变量的声明var、const、let的区别 表头 var let const 定义常量 √ 定义变量 √ √ 可被释放 √ √ √ 可被提升 √ 重复定义检查 ...","permalink":"/post/JavaScript代码技巧","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"author":{"name":"如峰","slug":"blog-author","avatar":"/logo/logo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}